[
["index.html", "40 Days and 40 Nights Motivation Introduction What to expect", " 40 Days and 40 Nights Martin Morgan L. Shawn Matott 2020-04-10 Motivation This is a WORK IN PROGRESS. This course was suggested and enabled by Adam Kisailus and Richard Hershberger. It is available for Roswell Park graduate students. Introduction The word ‘quarantine’ is from the 1660’s and refers to the fourty days (Italian quaranta giorni) a ship suspected of carrying disease was kept in isolation. What to do in a quarantine? The astronaut Scott Kelly spent nearly a year on the International Space Station. In a New York Times opinion piece he says, among other things, that ‘you need a hobby’, and what better hobby than a useful one? Let’s take the opportunity provided by COVID-19 to learn R for statistical analysis and comprehension of data. Who knows, it may be useful after all this is over! What to expect We’ll meet via zoom twice a week, Mondays and Fridays, for one hour. We’ll use this time to make sure everyone is making progress, and to introduce new or more difficult topics. Other days we’ll have short exercises and activities that hopefully provide an opportunity to learn at your own speed. We haven’t thought this through much, but roughly we might cover: Week 1: We’ll start with the basics of installing and using R. We’ll set up R and RStudio on your local computer, or if that doesn’t work use a cloud-based RStudio. We’ll learn the basics of R – numeric, character, logical, and other vectors; variables; and slightly more complicated representations of ‘factors’ and dates. We’ll also use RStudio to write a script that allows us to easily re-create an analysis, illustrating the power concept of reproducible research. activity &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;walk&quot;) minutes_per_activity &lt;- c(20, 30, 60, 60, 60) minutes_per_activity &gt;= 60 ## [1] FALSE FALSE TRUE TRUE TRUE activity[minutes_per_activity &gt;= 60] ## [1] &quot;conference call&quot; &quot;webinar&quot; &quot;walk&quot; Week 2: The data.frame. This week is all about R’s data.frame, a versatile way of representing and manipulating a table (like an Excel spreadsheet) of data. We’ll learn how to create, write, and read a data.frame; how to go from data in a spreadsheet in Excel to a data.frame in R; and how to perform simple manipulations on a data.frame, like creating a subset of data, summarizing values in a column, and summarizing values in one column based on a grouping variable in another column. url = &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv&quot; cases &lt;- read.csv(url) erie &lt;- subset(cases, county == &quot;Erie&quot; &amp; state == &quot;New York&quot;) tail(erie) ## date county state fips cases deaths ## 29866 2020-04-03 Erie New York 36029 802 22 ## 32254 2020-04-04 Erie New York 36029 945 26 ## 34687 2020-04-05 Erie New York 36029 1059 27 ## 37160 2020-04-06 Erie New York 36029 1163 30 ## 39674 2020-04-07 Erie New York 36029 1163 36 ## 42227 2020-04-08 Erie New York 36029 1205 38 Week 3: Packages for extending R. A great strength of R is its extensibility through packages. We’ll learn about CRAN, and install and use the ‘tidyverse’ suite of packages. The tidyverse provides us with an alternative set of tools for working with tabular data, and We’ll use publicly available data to explore the spread of COVID-19 in the US. We’ll read, filter, mutate (change), and select subsets of the data, and group data by one column (e.g., ‘state’) to create summaries (e.g., cases per state). We’ll also start to explore data visualization, creating our first plots of the spread of COVID-19. library(dplyr) library(ggplot2) ## ...additional commands Week 4: Maps. This week will be a specialized topic, tackling relatively advanced challenges associated with spatial visualization. Week 5: Bioinformatic analysis with Bioconductor. Bioconductor is a collection of more than 1800 R packages for the statistical analysis and comprehension of high-throughput genomic data. We’ll use Bioconductor to look at COVID-19 genome sequences, and to explore emerging genomic data relevant to the virus. Week 6: COVID-19 has really shown the value of open data and collaboration. In the final week of our quarantine, we’ll explore collaboration; developing independent and group projects that synthesize the use of R to explore data. We’ll learn tools of collaboration including git and github, and develop ‘best practices’ for robust, reproducible research. We’ll learn about writing ‘markdown’ reports to share our project with others. "],
["one.html", "Week 1 Basics 1.1 Day 1 (Monday) Zoom orientation 1.2 Day 2: Vectors and variables 1.3 Day 3: factor() and Date() objects 1.4 Day 4: R scripts 1.5 Day 5 (Friday) Zoom check-in 1.6 Day 6 1.7 Day 7", " Week 1 Basics 1.1 Day 1 (Monday) Zoom orientation 1.1.1 Logistics (10 minutes, Adam) Course material Available at https://mtmorgan.github.io/QuaRantine Microsoft TEAMS Visit https://teams.microsoft.org and sign in with your Roswell username (e.g., MA38727@RoswellPark.org) and the password you use to check email, etc. Join the QuaRantine team 1.1.2 Installing R and RStudio (25 minutes, Shawn) What is R? A programming language for statistical computing, data analysis and scientific graphics. Open-source with a large (and growing) user community. Currently in the top 10 most popular languages according to the tiobe index. What is RStudio? RStudio provides an integrated editor and shell environment to make R programming easier. Some of the more useful features include: Syntax highlighting and color coding Easy switching between shell and editor Dynamic help and docs Installing R and RStudio Two ways to “get” RStudio: Install on your laptop or desktop Download the free desktop installer here Use the rstudio.cloud resource Visit rstudio.cloud, sign-up, and sign-on The preferred approach for this course is to try to install R and RStudio on your own computer Windows Users: Download R for Windows and run the installer. Avoid, if possible, installing as administrator. Download RStudio for Windows and run the installer. Test the installation by launching RStudio. You should end up with a window like the screen shot below. Mac Users: Download R for macOS (OS X 10.11, El Capitan, and later) or older macOS and run the installer. Download RStudio for macOS and run the installer. Test the installation by launching RStudio. You should end up with a window like the screen shot below. An ALTERNATIVE, if installing on your own computer does not work: Do the following only if you are NOT ABLE TO INSTALL R and RStudio. Visit rstudio.cloud. Click the ‘Get Started’ button, and create an account (I used my gmail account…). You should end up at a screen like the following. Click on the ‘New Project’ button, to end up with a screen like the one below. Note the ‘Untitled Project’ at the top of the screen; click on it to name your project, e.g., ‘QuaRantine’. Breakout Room At this point you should have RStudio running either via your desktop installation or through rstudio.cloud. If not, please let us know via the chat window and we’ll invite you to a breakout room to troubleshoot your installation. 1.1.3 Basics of R (25 minutes, Martin) R as a simple calculator 1 + 2 ## [1] 3 R Console Output Enter this in the console: 2 + 3 * 5 ## [1] 17 Q: what’s the [1] all about in the output? A: It’s the index of the first entry in each line. This is maybe a better example: 1:30 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## [26] 26 27 28 29 30 Displaying help in the R Console ? &lt;command-name&gt; Some examples: ? cat ? print Variables Naming variables in R A variable name can contain letters, numbers, and the dot . or underline _ characters. Variables should start with a letter. Try entering these in the console: y = 2 try.this = 33.3 oneMoreTime = &quot;woohoo&quot; Now try these: 2y = 2 _z = 33.3 function = &quot;oops, my bad&quot; R is case sensitive (R != r) R = 2 r = 3 R == r ## [1] FALSE Variable Assignment You may use = or &lt;- (and even -&gt;) to assign values to a variable. x &lt;- 2 + 3 * 5 y = 2 + 3 * 6 2 + 3 * 7 -&gt; z cat(x, y, z) ## 17 20 23 R’s four basic ‘atomic’ data types Numeric (includes integer, double, etc.) 3.14, 1, 2600 Character (string) &quot;hey, I'm a string&quot; 'single quotes are ok too' Logical TRUE or FALSE (note all caps) NA not assigned (no known value) Use class() to query the class of data: a &lt;- 5 class(a) ## [1] &quot;numeric&quot; Use as. to coerce a variable to a specific data type a &lt;- as.integer(5) class(a) ## [1] &quot;integer&quot; d &lt;- as.logical(a) d ## [1] TRUE class(d) ## [1] &quot;logical&quot; Using Logical Operators Equivalence test (==): 1 == 2 ## [1] FALSE Not equal test (!=): 1 != 2 ## [1] TRUE less-than (&lt;) and greater-than (&gt;): 18 &gt; 44 ## [1] FALSE 3 &lt; 204 ## [1] TRUE Logical Or (|): (1 == 2) | (2 == 2) ## [1] TRUE Logical And (&amp;): (1 == 2) &amp; (2 == 2) ## [1] FALSE Objects and Vectors in R Objects R stores everything, variables included, in ‘objects’. x &lt;- 2.71 # print the value of an object print(x) ## [1] 2.71 # determine class or internal type of an object class(x) ## [1] &quot;numeric&quot; # TRUE if an object has not been assigned a value is.na(x) ## [1] FALSE Vectors ‘Vectors’ and ‘data frames’ are the bread and butter of R Vectors consist of several elements of the same class e.g. a vector of heart rates, one per patient Data frames (data.frame) Data frames are structures that can contain columns of various types e.g. height, weight, age, heart rate, etc. Handy containers for experimental data Analogous to spreadsheet data More on Data Frames throughout the week! Working with Vectors Creating a Vector Use the c() function name &lt;- c(&quot;John Doe&quot;, &quot;Jane Smith&quot;, &quot;MacGillicuddy Jones&quot;, &quot;Echo Shamus&quot;) age &lt;- c(36, 54, 82, 15) favorite_color &lt;- c(&quot;red&quot;, &quot;orange&quot;, &quot;green&quot;, &quot;black&quot;) ## print the vectors name ## [1] &quot;John Doe&quot; &quot;Jane Smith&quot; &quot;MacGillicuddy Jones&quot; ## [4] &quot;Echo Shamus&quot; age ## [1] 36 54 82 15 favorite_color ## [1] &quot;red&quot; &quot;orange&quot; &quot;green&quot; &quot;black&quot; Accessing vector data Use numerical indexing R uses 1-based indexing 1st vector element has index of 1 2nd has an index of 2 3rd has an index of 3 and so on name[1] ## [1] &quot;John Doe&quot; age[3] ## [1] 82 R supports “slicing” (i.e. extracting multiple items) favorite_color[c(2, 3)] ## [1] &quot;orange&quot; &quot;green&quot; Negative indices are omitted age[-2] ## [1] 36 82 15 Some Useful Vector Operations length(): number of elements sum(): sum of all element values unique(): distinct values sort(): sort elements, omitting NAs order(): indices of sorted elements, NAs are last rev(): reverse the order summary(): simple statistics a &lt;- c(5, 5, 6, 7, 8, 4) sum(a) ## [1] 35 length(a) ## [1] 6 unique(a) ## [1] 5 6 7 8 4 sort(a) ## [1] 4 5 5 6 7 8 order(a) ## [1] 6 1 2 3 4 5 a[order(a)] ## [1] 4 5 5 6 7 8 rev(a) ## [1] 4 8 7 6 5 5 summary(a) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 4.000 5.000 5.500 5.833 6.750 8.000 Handling Missing Data First consider the reason(s) for the missing data e.g. concentrations that are below detectable levels? Sometimes NAs in data require special statistical methods Other times we can safely discard / ignore NA entries To remove NAs prior to a calculation: y = c(1,NA,3,2,NA) sum(y, na.rm=TRUE) ## [1] 6 Wrapping up day 1 The goal for today was to rapidly cover some of the essential aspects of R programming. For the remainder of the week you’ll work at your own pace to get more of a hands-on deep dive into this material. If you run into trouble please don’t hesiate to ask for help via Teams (QuaRantine Team), slack (QuaRantine Course), or email (Drs. Matott and Morgan) — whatever works best for you! 1.2 Day 2: Vectors and variables Our overall goal for the next few days is to use R to create a daily log of quarantine activities. Our goal for today is to become familiar with R vectors. Along the way we’ll probably make data entry and other errors that will start to get us comfortable with R. If you run into problems, reach out to the slack channel for support! The astronaut Scott Kelly said that to survive a year on the International Space Station he found it essential to Follow a schedule – plan your day, and stick to the plan Pace yourselves – you’ve got a long time to accomplish tasks, so don’t try to get everything done in the first week. Go outside – if Scott can head out to space, we should be able to make it to the back yard or around the block! Get a hobby – something not work related, and away from that evil little screen. Maybe it’s as simple as rediscovering the joy of reading. Keep a journal Take time to connect – on a human level, with people you work with and people you don’t! Listen to experts – Scott talked about relying on the mission controllers; for us maybe that’s watching webinars or taking courses in new topics! Wash your hands! I wanted to emphasize ‘follow a schedule’ and ‘keep a journal’. How can R help? Well, I want to create a short record of how I spend today, day 2 of my quarantine. My first goal is to create vectors describing things I plan to do today. Let’s start with some of these. To get up to speed, type the following into the R console, at the &gt; prompt 1 + 2 Press the carriage return and remind yourself that R is a calculator, and knows how to work with numbers! Now type an activity in your day, for instance I often start with &quot;check e-mail&quot; Now try assigning that to a variable, and displaying the variable, e.g., activity &lt;- &quot;check e-mail&quot; activity ## [1] &quot;check e-mail&quot; OK, likely you have several activities scheduled. Create a vector of a few of these by concatenating individual values c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;walk&quot;) ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; &quot;webinar&quot; ## [5] &quot;walk&quot; Assign these to a variable activity &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;walk&quot;) activity ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; &quot;webinar&quot; ## [5] &quot;walk&quot; Create another vector, but this time the vector should contain the minutes spent on each activity minutes &lt;- c(20, 30, 60, 60, 60) minutes ## [1] 20 30 60 60 60 So I spent 20 minutes checking email, 30 minutes having breakfast and things like that, I was in a conference call for 60 minutes, and then attended a webinar where I learned new stuff for another 60 minutes. Finally I went for a walk to clear my head and remember why I’m doing things. Apply some basic functions to the variables, e.g., use length() to demonstrate that you for each activity you have recorded the minutes. length(activity) ## [1] 5 length(minutes) ## [1] 5 Use tail() to select the last two activities (or head() to select the first two…) tail(activity, 2) ## [1] &quot;webinar&quot; &quot;walk&quot; tail(minutes, 2) ## [1] 60 60 R has other types of vectors. Create a logical vector that indicates whether each activity was ‘work’ activity’ or something you did for your own survival. We’ll say that checking email is a work-related activity! is_work &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE) is_work ## [1] TRUE FALSE TRUE TRUE FALSE 1.3 Day 3: factor() and Date() objects Yesterday we learned about character, numeric, and logical vectors in R (you may need to revisit previous notes and re-create these variables) activity ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; &quot;webinar&quot; ## [5] &quot;walk&quot; minutes ## [1] 20 30 60 60 60 is_work ## [1] TRUE FALSE TRUE TRUE FALSE Today we will learn about slightly more complicated vectors. We created the logical vector is_work to classify each activity as either work-related or not. What if we had several different categories? For instance, we might want to classify the activities into categories inspired by astronaut Kelly’s guidance. Categories might include: connect with others; go outside and exercise; consult experts; get a hobby; and (my own category, I guess) perform essential functions like eating and sleeping. So the values of activity could be classified as classification &lt;- c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;exercise&quot;) I want to emphasize a difference between the activity and classification variables. I want activity to be a character vector that could contain any description of an activity. But I want classification to be terms only from a limited set of possibilities. In R, I want classification to be a special type of vector called a factor, with the values of the vector restricted to a set of possible levels that I define. I create a factor by enumerating the possible levels that the factor can take on levels &lt;- c(&quot;connect&quot;, &quot;exercise&quot;, &quot;consult&quot;, &quot;hobby&quot;, &quot;essential&quot;) And then tell R that the vector classification should be a factor with values taken from a particular set of levels classification &lt;- factor( c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;exercise&quot;), levels = levels ) classification ## [1] connect essential connect consult exercise ## Levels: connect exercise consult hobby essential Notice that activity (a character vector) displays differently from classification (a factor) activity ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; &quot;webinar&quot; ## [5] &quot;walk&quot; classification ## [1] connect essential connect consult exercise ## Levels: connect exercise consult hobby essential Also, some of the levels (e.g., hobby) have not been part of our schedule yet, but the factor still ‘knows’ about the level. Notice also what happens when I try to use a value (disconnect) that is not a level of a factor factor(c(&quot;connect&quot;, &quot;disconnect&quot;), levels = levels) ## [1] connect &lt;NA&gt; ## Levels: connect exercise consult hobby essential The value with the unknown level is displayed as NA, for ‘not known’. NA values can be present in any vector, e.g., c(1, 2, NA, 4) ## [1] 1 2 NA 4 c(&quot;walk&quot;, &quot;talk&quot;, NA) ## [1] &quot;walk&quot; &quot;talk&quot; NA c(NA, TRUE, FALSE, TRUE, TRUE) ## [1] NA TRUE FALSE TRUE TRUE This serves as an indication that the value is simply not available. Use NA rather than adopting some special code (e.g., ‘-99’) to indicate when a value is not available. One other type of vector we will work a lot with are dates. All of my activities are for today, so I’ll start with a character vector with the same length as my activity vector, each indicating the date in a consistent month-day-year format dates &lt;- c(&quot;04-14-2020&quot;, &quot;04-14-2020&quot;, &quot;04-14-2020&quot;, &quot;04-14-2020&quot;, &quot;04-14-2020&quot;) dates ## [1] &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; Incidentally, I could do this more efficiently using the replicate function rep(&quot;04-14-2020&quot;, 5) ## [1] &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; And even better use length() to know for sure how many times I should replicate the character vector rep(&quot;04-14-2020&quot;, length(activity)) ## [1] &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; dates is a character vector, but it has specially meaning as a calendar date, R has a Date class that knows how to work with dates, for instance to calculate the number of days between two dates. We will coerce date to an object of class Date using a function as.Date. Here’s our first attempt… as.Date(dates) … but this results in an error: Error in charToDate(x) : character string is not in a standard unambiguous format R doesn’t know the format (month-day-year) of the dates we provide. The solution is to add a second argument to as.Date(). The second argument is a character vector that describes the date format. The format we use is &quot;%m-%d-%Y&quot;, which says that we provide the %month first, then a hyphen, then the %day, another hyphen, and finally the four-digit %Year. as.Date(dates, format = &quot;%m-%d-%Y&quot;) ## [1] &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; Notice that the format has been standardized to year-month-day. Also notice that although the original value of date and the return from as.Data() look the same, they are actually of different class. class(date) ## [1] &quot;function&quot; class(as.Date(dates, format = &quot;%m-%d-%Y&quot;)) ## [1] &quot;Date&quot; R will use the information about class to enable specialized calculation on dates, e.g., to sort them or to determine the number of days between different dates. So here’s our date vector as a Date object. dates &lt;- rep(&quot;04-14-2020&quot;, length(activity)) date &lt;- as.Date(dates, format = &quot;%m-%d-%Y&quot;) date ## [1] &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; OK, time for a walk! See you tomorrow! 1.4 Day 4: R scripts Some of you may have already started saving your R commands as script files. As the material gets more complicated (and more interesting) everyone will want to start doing this. Here is an example to get you started: In RStudio, click “File –&gt; New File –&gt; R Script” to create a new script file and open it in the editor By convention, R scripts have a .R exstension (e.g. my_script.R) In RStudio, click into your untitled script and click “File –&gt; Save” Name your file something fun like my_first_script.R and save it Use the # character for comments. Enter the following into your R Script file: ## This is my first R script Enter each command on a separate line. It’s also possible to enter multiple (short!) commands on a single line, separated by a semi-colon ; x = &quot;Hello world!&quot; y = &#39;Today is&#39;; d = format(Sys.Date(), &quot;%b %d, %Y&quot;) cat(x, y, d) Use the “Run” button in RStudio to run the highlighted portion of an R script file. Try this on your simple R Script. x = &quot;Hello world!&quot;; y = &#39;Today is&#39;; d = format(Sys.Date(),&quot;%b %d, %Y&quot;) cat(x, y, d, &quot;\\n&quot;) ## Hello world! Today is Apr 10, 2020 Alternatively, use “Run –&gt; Run All” to run an entire script file. For today’s exercise, create a script file that summarizes your quarantine activities over several days. Use comments, white space (blank lines and spaces), and variable names to summarize each day. Here’s what I’ve got… ## &#39;classification&#39; factor levels levels &lt;- c(&quot;connect&quot;, &quot;exercise&quot;, &quot;consult&quot;, &quot;hobby&quot;, &quot;essential&quot;) ## Quarantine log, day 1 activity_day_1 &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;walk&quot;) minutes_day_2 &lt;- c(20, 30, 60, 60, 60) is_work_day_2 &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE) classification_day_2 &lt;- factor( c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;exercise&quot;), levels = levels ) date_day_1 &lt;- as.Date(rep(&quot;04-14-2020&quot;, length(activity_day_1)), &quot;%m-%d-%Y&quot;) ## Quarantine log, day 2 activity_day_2 &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;read a book&quot;) minutes_day_2 &lt;- c(20, 30, 60, 60, 60) is_work_day_2 &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE) classification_day_2 &lt;- factor( c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;hobby&quot;), levels = levels ) date_day_2 &lt;- as.Date(rep(&quot;04-15-2020&quot;, length(activity_day_2)), &quot;%m-%d-%Y&quot;) ## Quarantine log, day 3 activity_day_3 &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;webinar&quot;, &quot;read a book&quot;) minutes_day_3 &lt;- c(20, 30, 60, 60) is_work_day_3 &lt;- c(TRUE, FALSE, TRUE, FALSE) classification_day_3 &lt;- factor( c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;hobby&quot;), levels = levels ) date_day_3 &lt;- as.Date(rep(&quot;04-16-2020&quot;, length(activity_day_3)), &quot;%m-%d-%Y&quot;) Try concatenating these values, e.g., activity &lt;- c(activity_day_1, activity_day_2, activity_day_3) activity ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; &quot;webinar&quot; ## [5] &quot;walk&quot; &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; ## [9] &quot;webinar&quot; &quot;read a book&quot; &quot;check e-mail&quot; &quot;breakfast&quot; ## [13] &quot;webinar&quot; &quot;read a book&quot; Save your script, quit R and RStudio, and restart R. Re-open and run the script to re-do your original work. Think about how this makes your work reproducible from one day to the next, and how making your scientific work reproducible would be advantageous. 1.5 Day 5 (Friday) Zoom check-in 1.5.1 Review and trouble shoot (40 minutes) 1.5.2 Weekend activities (20 minutes) Concatenating two vectors Sneak peak: data.frame Saving data as simple ‘text’ files R Scripts 1.6 Day 6 1.7 Day 7 "],
["two.html", "Week 2 The data frame 2.1 Day 8 (Monday) Zoom check-in 2.2 Day 9 2.3 Day 10 2.4 Day 11 2.5 Day 12 (Friday) Zoom check-in 2.6 Day 13 2.7 Day 14", " Week 2 The data frame 2.1 Day 8 (Monday) Zoom check-in 2.2 Day 9 2.3 Day 10 2.4 Day 11 2.5 Day 12 (Friday) Zoom check-in 2.6 Day 13 2.7 Day 14 Self-directed activities. "],
["three.html", "Week 3 Packages and the ‘tidyverse’ 3.1 Day 15 (Monday) Zoom check-in 3.2 CRAN 3.3 The ‘tidyverse’ of packages 3.4 Day 16 3.5 Day 17 3.6 Day 18 3.7 Day 19 (Friday) Zoom check-in 3.8 Day 20 3.9 Day 21", " Week 3 Packages and the ‘tidyverse’ 3.1 Day 15 (Monday) Zoom check-in 3.2 CRAN 3.3 The ‘tidyverse’ of packages 3.4 Day 16 3.5 Day 17 3.6 Day 18 3.7 Day 19 (Friday) Zoom check-in 3.7.1 Review and trouble shoot (25 minutes) 3.7.2 Next week (25 minutes) 3.8 Day 20 3.9 Day 21 Self-directed activities. "],
["four.html", "Week 4 Maps and spatial statistics 4.1 Day 22 (Monday) Zoom check-in 4.2 Day 23 4.3 Day 24 4.4 Day 25 4.5 Day 26 (Friday) Zoom check-in 4.6 Day 27 4.7 Day 28", " Week 4 Maps and spatial statistics 4.1 Day 22 (Monday) Zoom check-in 4.2 Day 23 4.3 Day 24 4.4 Day 25 4.5 Day 26 (Friday) Zoom check-in 4.5.1 Review and trouble shoot (25 minutes) 4.5.2 Next week (25 minutes) 4.6 Day 27 4.7 Day 28 Self-directed activities. "],
["five.html", "Week 5 Bioinformatics with Bioconductor 5.1 Day 29 (Monday) Zoom check-in 5.2 Day 30 5.3 Day 31 5.4 Day 32 5.5 Day 33 (Friday) Zoom check-in 5.6 Day 34 5.7 Day 35", " Week 5 Bioinformatics with Bioconductor 5.1 Day 29 (Monday) Zoom check-in 5.2 Day 30 5.3 Day 31 5.4 Day 32 5.5 Day 33 (Friday) Zoom check-in 5.5.1 Review and trouble shoot (25 minutes) 5.5.2 Next week (25 minutes) 5.6 Day 34 5.7 Day 35 Self-directed activities. "],
["six.html", "Week 6 Collaboration 6.1 5 Days (Monday) Zoom check-in 6.2 4 Days 6.3 3 Days 6.4 2 Days 6.5 Today! (Friday) Zoom check-in", " Week 6 Collaboration 6.1 5 Days (Monday) Zoom check-in 6.2 4 Days 6.3 3 Days 6.4 2 Days 6.5 Today! (Friday) Zoom check-in Course review and next steps "]
]
