[
["three.html", "Week 3 Packages and the ‘tidyverse’ 3.1 Day 15 (Monday) Zoom check-in 3.2 Day 16 Key tidyverse packages: readr and dplyr 3.3 Day 17 Visualization with ggplot2 3.4 Day 18 Worldwide COVID data 3.5 Day 19 (Friday) Zoom check-in 3.6 Day 20 Exploring the course of pandemic in different regions 3.7 Day 21", " Week 3 Packages and the ‘tidyverse’ 3.1 Day 15 (Monday) Zoom check-in CRAN Installing and attaching packages The ‘tidyverse’ of packages readr for fast data input The tibble: a nicer data.frame Example: US COVID data. N.B., readr::read_csv() rather than read.csv() library(readr) url &lt;- &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv&quot; us &lt;- read_csv(url) ## Parsed with column specification: ## cols( ## date = col_date(format = &quot;&quot;), ## county = col_character(), ## state = col_character(), ## fips = col_character(), ## cases = col_double(), ## deaths = col_double() ## ) us ## # A tibble: 78,548 x 6 ## date county state fips cases deaths ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2020-01-21 Snohomish Washington 53061 1 0 ## 2 2020-01-22 Snohomish Washington 53061 1 0 ## 3 2020-01-23 Snohomish Washington 53061 1 0 ## 4 2020-01-24 Cook Illinois 17031 1 0 ## 5 2020-01-24 Snohomish Washington 53061 1 0 ## 6 2020-01-25 Orange California 06059 1 0 ## 7 2020-01-25 Cook Illinois 17031 1 0 ## 8 2020-01-25 Snohomish Washington 53061 1 0 ## 9 2020-01-26 Maricopa Arizona 04013 1 0 ## 10 2020-01-26 Los Angeles California 06037 1 0 ## # … with 78,538 more rows Note that date has been deduced correctly read_csv() does not coerce inputs to factor (no need to use stringsAsFactors = FALSE) The tibble displays nicely (first ten lines, with an indication of total lines) dplyr for data manipulation load library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union The pipe, %&gt;% Verbs for data transformation A small set of functions that allow very rich data transformation All have the same first argument – the tibble to be transformed All allow ‘non-standard’ evaluation – use the variable name without quotes &quot;. filter() rows that meet specific criteria us %&gt;% filter(state == &quot;New York&quot;, county == &quot;Erie&quot;) ## # A tibble: 38 x 6 ## date county state fips cases deaths ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2020-03-15 Erie New York 36029 3 0 ## 2 2020-03-16 Erie New York 36029 6 0 ## 3 2020-03-17 Erie New York 36029 7 0 ## 4 2020-03-18 Erie New York 36029 7 0 ## 5 2020-03-19 Erie New York 36029 28 0 ## 6 2020-03-20 Erie New York 36029 31 0 ## 7 2020-03-21 Erie New York 36029 38 0 ## 8 2020-03-22 Erie New York 36029 54 0 ## 9 2020-03-23 Erie New York 36029 87 0 ## 10 2020-03-24 Erie New York 36029 107 0 ## # … with 28 more rows select() specific columns us %&gt;% filter(state == &quot;New York&quot;, county == &quot;Erie&quot;) %&gt;% select(state, county, date, cases) ## # A tibble: 38 x 4 ## state county date cases ## &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; ## 1 New York Erie 2020-03-15 3 ## 2 New York Erie 2020-03-16 6 ## 3 New York Erie 2020-03-17 7 ## 4 New York Erie 2020-03-18 7 ## 5 New York Erie 2020-03-19 28 ## 6 New York Erie 2020-03-20 31 ## 7 New York Erie 2020-03-21 38 ## 8 New York Erie 2020-03-22 54 ## 9 New York Erie 2020-03-23 87 ## 10 New York Erie 2020-03-24 107 ## # … with 28 more rows Other common verbs (see tomorrow’s quarantine) mutate() (add or update) columns summarize() one or more columns group_by() one or more variables when performing computations. ungroup() removes the grouping. arrange() rows based on values in particular column(s); desc() in descending order. count() the number of times values occur 3.2 Day 16 Key tidyverse packages: readr and dplyr Start a script for today. In the script Load the libraries that we will use library(readr) library(dplyr) If R responds with (similarly for dplyr) Error in library(readr) : there is no package called &#39;readr&#39; then you’ll need to install (just once per R installation) the readr pacakge install.packages(&quot;readr&quot;, repos = &quot;https://cran.r-project.org&quot;) Work through the following commands, adding appropriate lines to your script Read US COVID data. N.B., readr::read_csv() rather than read.csv() url &lt;- &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv&quot; us &lt;- read_csv(url) ## Parsed with column specification: ## cols( ## date = col_date(format = &quot;&quot;), ## county = col_character(), ## state = col_character(), ## fips = col_character(), ## cases = col_double(), ## deaths = col_double() ## ) us ## # A tibble: 78,548 x 6 ## date county state fips cases deaths ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2020-01-21 Snohomish Washington 53061 1 0 ## 2 2020-01-22 Snohomish Washington 53061 1 0 ## 3 2020-01-23 Snohomish Washington 53061 1 0 ## 4 2020-01-24 Cook Illinois 17031 1 0 ## 5 2020-01-24 Snohomish Washington 53061 1 0 ## 6 2020-01-25 Orange California 06059 1 0 ## 7 2020-01-25 Cook Illinois 17031 1 0 ## 8 2020-01-25 Snohomish Washington 53061 1 0 ## 9 2020-01-26 Maricopa Arizona 04013 1 0 ## 10 2020-01-26 Los Angeles California 06037 1 0 ## # … with 78,538 more rows filter() rows that meet specific criteria us %&gt;% filter(state == &quot;New York&quot;, county == &quot;Erie&quot;) ## # A tibble: 38 x 6 ## date county state fips cases deaths ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2020-03-15 Erie New York 36029 3 0 ## 2 2020-03-16 Erie New York 36029 6 0 ## 3 2020-03-17 Erie New York 36029 7 0 ## 4 2020-03-18 Erie New York 36029 7 0 ## 5 2020-03-19 Erie New York 36029 28 0 ## 6 2020-03-20 Erie New York 36029 31 0 ## 7 2020-03-21 Erie New York 36029 38 0 ## 8 2020-03-22 Erie New York 36029 54 0 ## 9 2020-03-23 Erie New York 36029 87 0 ## 10 2020-03-24 Erie New York 36029 107 0 ## # … with 28 more rows select() specific columns us %&gt;% filter(state == &quot;New York&quot;, county == &quot;Erie&quot;) %&gt;% select(state, county, date, cases) ## # A tibble: 38 x 4 ## state county date cases ## &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; ## 1 New York Erie 2020-03-15 3 ## 2 New York Erie 2020-03-16 6 ## 3 New York Erie 2020-03-17 7 ## 4 New York Erie 2020-03-18 7 ## 5 New York Erie 2020-03-19 28 ## 6 New York Erie 2020-03-20 31 ## 7 New York Erie 2020-03-21 38 ## 8 New York Erie 2020-03-22 54 ## 9 New York Erie 2020-03-23 87 ## 10 New York Erie 2020-03-24 107 ## # … with 28 more rows mutate() (add or update) columns erie &lt;- us %&gt;% filter(state == &quot;New York&quot;, county == &quot;Erie&quot;) erie %&gt;% mutate(new_cases = diff(c(0, cases))) ## # A tibble: 38 x 7 ## date county state fips cases deaths new_cases ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2020-03-15 Erie New York 36029 3 0 3 ## 2 2020-03-16 Erie New York 36029 6 0 3 ## 3 2020-03-17 Erie New York 36029 7 0 1 ## 4 2020-03-18 Erie New York 36029 7 0 0 ## 5 2020-03-19 Erie New York 36029 28 0 21 ## 6 2020-03-20 Erie New York 36029 31 0 3 ## 7 2020-03-21 Erie New York 36029 38 0 7 ## 8 2020-03-22 Erie New York 36029 54 0 16 ## 9 2020-03-23 Erie New York 36029 87 0 33 ## 10 2020-03-24 Erie New York 36029 107 0 20 ## # … with 28 more rows summarize() one or more columns erie %&gt;% mutate(new_cases = diff(c(0, cases))) %&gt;% summarize( duration = n(), total_cases = max(cases), max_new_cases_per_day = max(new_cases), mean_new_cases_per_day = mean(new_cases), median_new_cases_per_day = median(new_cases) ) ## # A tibble: 1 x 5 ## duration total_cases max_new_cases_per… mean_new_cases_per… median_new_cases_… ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 38 2147 181 56.5 45.5 group_by() one or more variables when performing computations us_county_cases &lt;- us %&gt;% group_by(county, state) %&gt;% summarize(total_cases = max(cases)) us_state_cases &lt;- us_county_cases %&gt;% group_by(state) %&gt;% summarize(total_cases = sum(total_cases)) arrange() based on a particular column; desc() in descending order. us_county_cases %&gt;% arrange(desc(total_cases)) ## # A tibble: 2,817 x 3 ## # Groups: county [1,659] ## county state total_cases ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 New York City New York 139335 ## 2 Nassau New York 31079 ## 3 Suffolk New York 28154 ## 4 Westchester New York 24655 ## 5 Cook Illinois 23181 ## 6 Los Angeles California 15140 ## 7 Wayne Michigan 14255 ## 8 Bergen New Jersey 13356 ## 9 Hudson New Jersey 11636 ## 10 Essex New Jersey 11128 ## # … with 2,807 more rows us_state_cases %&gt;% arrange(desc(total_cases)) ## # A tibble: 55 x 2 ## state total_cases ## &lt;chr&gt; &lt;dbl&gt; ## 1 New York 253811 ## 2 New Jersey 96654 ## 3 Massachusetts 41199 ## 4 California 35846 ## 5 Pennsylvania 35385 ## 6 Illinois 33084 ## 7 Michigan 32944 ## 8 Florida 27870 ## 9 Louisiana 24859 ## 10 Texas 20957 ## # … with 45 more rows count() the number of times values occur (duration of the pandemic?) us %&gt;% count(county, state) %&gt;% arrange(desc(n)) ## # A tibble: 2,817 x 3 ## county state n ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Snohomish Washington 92 ## 2 Cook Illinois 89 ## 3 Orange California 88 ## 4 Los Angeles California 87 ## 5 Maricopa Arizona 87 ## 6 Santa Clara California 82 ## 7 Suffolk Massachusetts 81 ## 8 San Francisco California 80 ## 9 Dane Wisconsin 77 ## 10 San Diego California 72 ## # … with 2,807 more rows 3.3 Day 17 Visualization with ggplot2 3.4 Day 18 Worldwide COVID data Setup Start a new script and load the packages we’ll use library(readr) library(dplyr) library(ggplot2) library(tidyr) # specialized functions for transforming tibbles These packages should have been installed during previous quarantines. Source CSSE at Johns Hopkins University, available on github hopkins = &quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&quot; csv &lt;- read_csv(hopkins) ## Parsed with column specification: ## cols( ## .default = col_double(), ## `Province/State` = col_character(), ## `Country/Region` = col_character() ## ) ## See spec(...) for full column specifications. ‘Tidy’ data The data has initial columns describing region, and then a column for each date of the pandemic. There are 264 rows, corresponding to the different regions covered by the database. We want instead to ‘pivot’ the data, so that each row represents cases in a particular region on a particular date, analogous to the way the US data we have been investigating earlier has been arranged. tidyr provides functions for manipulating a tibble into ‘tidy’ format. tidyr::pivot_longer() takes a ‘wide’ data frame like csv, and allows us to transform it to the ‘long’ format we are interested in. I discovered how to work with pivot_longer() using its help page ?tidyr::pivot_longer The first argument represents columns to pivot or, as a convenience when these are negative values, columns we do not want to pivot. We do not want to pivot columns 1 through 4, so this argument will be -(1:4). The names_to argument is the column name we want to use to refer to the names of the columns that we do pivot. We’ll pivot the columns that have a date in them, so it makes sense to use names_to = &quot;date&quot;. The values_to argument is the column name we want to use for the pivoted values. Since the values in the main part of csv are the number of cases observed, we’ll use values_to = &quot;cases&quot; Here’s what we have after pivoting csv %&gt;% pivot_longer(-(1:4), names_to = &quot;date&quot;, values_to = &quot;cases&quot;) ## # A tibble: 24,288 x 6 ## `Province/State` `Country/Region` Lat Long date cases ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 &lt;NA&gt; Afghanistan 33 65 1/22/20 0 ## 2 &lt;NA&gt; Afghanistan 33 65 1/23/20 0 ## 3 &lt;NA&gt; Afghanistan 33 65 1/24/20 0 ## 4 &lt;NA&gt; Afghanistan 33 65 1/25/20 0 ## 5 &lt;NA&gt; Afghanistan 33 65 1/26/20 0 ## 6 &lt;NA&gt; Afghanistan 33 65 1/27/20 0 ## 7 &lt;NA&gt; Afghanistan 33 65 1/28/20 0 ## 8 &lt;NA&gt; Afghanistan 33 65 1/29/20 0 ## 9 &lt;NA&gt; Afghanistan 33 65 1/30/20 0 ## 10 &lt;NA&gt; Afghanistan 33 65 1/31/20 0 ## # … with 24,278 more rows We’d like to further clean this up data Format our newly created ‘date’ column (using as.Date(), but with a format= argument appropriate for the format of the dates in this data set) Re-name, for convenience, the County/Region column as just country. Select only columns of interest – country, date, cases Some countries have multiple rows, because the data is a provincial or state levels, so we would like to sum all cases, grouped by country and date world &lt;- csv %&gt;% pivot_longer(-(1:4), names_to = &quot;date&quot;, values_to = &quot;cases&quot;) %&gt;% mutate( country = `Country/Region`, date = as.Date(date, format = &quot;%m/%d/%y&quot;) ) %&gt;% group_by(country, date) %&gt;% summarize(cases = sum(cases)) world ## # A tibble: 17,020 x 3 ## # Groups: country [185] ## country date cases ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; ## 1 Afghanistan 2020-01-22 0 ## 2 Afghanistan 2020-01-23 0 ## 3 Afghanistan 2020-01-24 0 ## 4 Afghanistan 2020-01-25 0 ## 5 Afghanistan 2020-01-26 0 ## 6 Afghanistan 2020-01-27 0 ## 7 Afghanistan 2020-01-28 0 ## 8 Afghanistan 2020-01-29 0 ## 9 Afghanistan 2020-01-30 0 ## 10 Afghanistan 2020-01-31 0 ## # … with 17,010 more rows Let’s also calculate new_cases by country Use group_by() to perform the new_cases computation for each country Use mutate() to calculate the new variable Use ungroup() to remove the grouping variable, so it doesn’t unexpectedly influence other calculations re-assign the updated tibble to the variable world world &lt;- world %&gt;% group_by(country) %&gt;% mutate(new_cases = diff(c(0, cases))) %&gt;% ungroup() Exploration Use group_by() and summarize() to find the maximum (total) number of cases, and arrange() these indesc()`ending order world %&gt;% group_by(country) %&gt;% summarize(n = max(cases)) %&gt;% arrange(desc(n)) ## # A tibble: 185 x 2 ## country n ## &lt;chr&gt; &lt;dbl&gt; ## 1 US 839675 ## 2 Spain 208389 ## 3 Italy 187327 ## 4 France 159297 ## 5 Germany 150648 ## 6 United Kingdom 134638 ## 7 Turkey 98674 ## 8 Iran 85996 ## 9 China 83868 ## 10 Russia 57999 ## # … with 175 more rows Visualization Start by creating a subset, e.g., the US country &lt;- &quot;US&quot; us &lt;- world %&gt;% filter(country == &quot;US&quot;) Use ggplot2 to visualize the progression of the pandemic ggplot(us, aes(date, new_cases)) + scale_y_log10() + geom_point() + geom_smooth() + ggtitle(paste(&quot;Country:&quot;, country)) ## Warning: Transformation introduced infinite values in continuous y-axis ## Warning: Transformation introduced infinite values in continuous y-axis ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ## Warning: Removed 25 rows containing non-finite values (stat_smooth). It seems like it would be convenient to capture our data cleaning and visualization steps into separate functions that can be re-used, e.g., on different days or for different visualizations. write a function for data retrieval and cleaning get_world_data &lt;- function() { ## read data from Hopkins&#39; github repository hopkins = &quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&quot; csv &lt;- read_csv(hopkins) ## &#39;tidy&#39; the data world &lt;- csv %&gt;% pivot_longer(-(1:4), names_to = &quot;date&quot;, values_to = &quot;cases&quot;) %&gt;% mutate( country = `Country/Region`, date = as.Date(date, format = &quot;%m/%d/%y&quot;) ) ## sum cases across regions within aa country world &lt;- world %&gt;% group_by(country, date) %&gt;% summarize(cases = sum(cases)) ## add `new_cases`, and return the result world %&gt;% group_by(country) %&gt;% mutate(new_cases = diff(c(0, cases))) %&gt;% ungroup() } …and for plotting by country plot_country &lt;- function(tbl, view_country = &quot;US&quot;) { country_title &lt;- paste(&quot;Country:&quot;, view_country) ## subset to just this country country_data &lt;- tbl %&gt;% filter(country == view_country) ## plot country_data %&gt;% ggplot(aes(date, 1 + new_cases)) + scale_y_log10() + geom_point() + ## add method and formula to quieten message geom_smooth(method = &quot;loess&quot;, formula = y ~ x) + ggtitle(country_title) } Note that, because the first argument of plot_country() is a tibble, the output of get_world_data() can be used as the input of plot_country(), and can be piped together, e.g., world &lt;- get_world_data() ## Parsed with column specification: ## cols( ## .default = col_double(), ## `Province/State` = col_character(), ## `Country/Region` = col_character() ## ) ## See spec(...) for full column specifications. world %&gt;% plot_country(&quot;Korea, South&quot;) 3.5 Day 19 (Friday) Zoom check-in 3.5.1 Review and trouble shoot (25 minutes) 3.5.2 Next week (25 minutes) 3.6 Day 20 Exploring the course of pandemic in different regions Use the data and functions from quarantine day 18 to place the pandemic into quantitative perspective. Start by retrieving the current data world &lt;- get_world_data() Start with the United States world %&gt;% plot_country(&quot;US&quot;) When did ‘stay at home’ orders come into effect? Did they appear to be effective? When would the data suggest that the pandemic might be considered ‘under control’, and country-wide stay-at-home orders might be relaxed? Explore other countries. The longest trajectory is probably displayed by China world %&gt;% plot_country(&quot;China&quot;) Italy and Spain were hit very hard, and relatively early, by the pandemic world %&gt;% plot_country(&quot;Italy&quot;) world %&gt;% plot_country(&quot;Spain&quot;) Austria relaxed quarantine very early, in the middle of April; does that seem like a good idea? world %&gt;% plot_country(&quot;Austria&quot;) Germany also had strong leadership (e.g., chancellor Angela Merkel provided clear and unambiguous rules for Germans to follow, and then self-isolated when her doctor, whom she had recently visited, tested positive) and an effective screening campaign (e.g., to make effective use of limited testing resources, in some instances pools of samples were screened, and only if the pool indicated infection were the individuals in the pool screened. world %&gt;% plot_country(&quot;Germany&quot;) At the start of the pandemic, Singapore had excellent surveillance (detecting individuals with symptoms) and contact tracing (identifying and placing in quarantine those individuals coming in contact with the infected individuals). New cases were initially very low, despite proximity to China, and Singapore managed the pandemic through only moderate social distancing (e.g., workers were encouraged to operate in shifts; stores and restaurants remained open). Unfortunately, Singaporeans returning from Europe (after travel restrictions were in place there) introduced new cases that appear to have overwhelmed the surveillance network. Later, the virus spread to large, densely populated migrant work housing. Singapore’s initial success at containing the virus seems to have fallen apart in the face of this wider spread, and more severe restrictions on economic and social life were imposed. world %&gt;% plot_country(&quot;Singapore&quot;) South Korea had a very ‘acute’ spike in cases associated with a large church. The response was to deploy very extensive testing and use modern approaches to tracking (e.g., cell phone apps) coupled with transparent accounting. South Korea imposed relatively modest social and economic restrictions. It seems like this has effectively ‘flattened the curve’ without pausing the economy. world %&gt;% plot_country(&quot;Korea, South&quot;) Where does your own exploration of the data take you? 3.7 Day 21 Self-directed activities. "]
]
