[
["one.html", "Week 1 Basics 1.1 Day 1 (Monday) Zoom orientation 1.2 Day 2: Vectors and variables 1.3 Day 3: The data.frame 1.4 Day 4: Essential data manipulation 1.5 Day 5 (Friday) Zoom check-in 1.6 Day 6 1.7 Day 7", " Week 1 Basics 1.1 Day 1 (Monday) Zoom orientation 1.1.1 Logistics (10 minutes, Adam) Course material Available at https://mtmorgan.github.io/QuaRantine Microsoft TEAMS Visit https://teams.microsoft.org and sign in with your Roswell username (e.g., MA38727@RoswellPark.org) and the password you use to check email, etc. Join the QuaRantine team 1.1.2 Installing R and RStudio (25 minutes, Shawn) What is R? A programming language for statistical computing, data analysis and scientific graphics. Open-source with a large (and growing) user community. Currently in the top 10 most popular languages according to the tiobe index. What is RStudio? RStudio provides an integrated editor and shell environment to make R programming easier. Some of the more useful features include: Syntax highlighting and color coding Easy switching between shell and editor Dynamic help and docs Installing R and RStudio Two ways to “get” RStudio: Install on your laptop or desktop Download the free desktop installer here Use the rstudio.cloud resource Visit rstudio.cloud, sign-up, and sign-on The preferred approach for this course is to try to install R and RStudio on your own computer Windows Users: Download R for Windows and run the installer. Avoid, if possible, installing as administrator. Download RStudio for Windows and run the installer. Test the installation by launching RStudio. You should end up with a window like the screen shot below. Mac Users: Download R for macOS (OS X 10.11, El Capitan, and later) or older macOS and run the installer. Download RStudio for macOS and run the installer. Test the installation by launching RStudio. You should end up with a window like the screen shot below. An ALTERNATIVE, if installing on your own computer does not work: Do the following only if you are NOT ABLE TO INSTALL R and RStudio. Visit rstudio.cloud. Click the ‘Get Started’ button, and create an account (I used my gmail account…). You should end up at a screen like the following. Click on the ‘New Project’ button, to end up with a screen like the one below. Note the ‘Untitled Project’ at the top of the screen; click on it to name your project, e.g., ‘QuaRantine’. Breakout Room At this point you should have RStudio running either via your desktop installation or through rstudio.cloud. If not, please let us know via the chat window and we’ll invite you to a breakout room to troubleshoot your installation. 1.1.3 Basics of R (25 minutes, Martin) R as a simple calculator 1 + 2 ## [1] 3 R Console Output Enter this in the console: 2 + 3 *5 ## [1] 17 Q: what’s the [1] all about in the output? A: It’s the index of the first entry in each line. This is maybe a better example: 1:30 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## [26] 26 27 28 29 30 Displaying help in the R Console ? &lt;command-name&gt; Some examples: ? cat ? print Variables Naming variables in R A variable name can contain letters, numbers, and the dot . or underline _ characters. Variables should start with a letter. Try entering these in the console: y = 2 try.this = 33.3 oneMoreTime = &quot;woohoo&quot; Now try these: 2y = 2 _z = 33.3 function = &quot;oops, my bad&quot; R is case sensitive (R != r) R = 2 r = 3 R == r ## [1] FALSE Variable Assignment You may use = or &lt;- or -&gt; to assign values to a variable. x &lt;- 2 + 3*5 y = 2 + 3*6 2 + 3*7 -&gt; z cat(x, &#39; &#39;, y, &#39; &#39;, z) ## 17 20 23 R’s Atomic Data Types 4 basic data types: Numeric (includes integer, double, etc.) 3.14, 1, 2600 Character (string) &quot;hey, I'm a string&quot; 'single quotes are ok too' Logical TRUE or FALSE (note all caps) NA not assigned (no known value) Use typeof() to query the data type: a = 5 typeof(a) ## [1] &quot;double&quot; Use as. to coerce a variable to a specific data type a = as.integer(5) typeof(a) ## [1] &quot;integer&quot; d = as.logical(a) cat(d) ## TRUE typeof(d) ## [1] &quot;logical&quot; Using Logical Operators Equivalence test (==): 1 == 2 ## [1] FALSE Not equal test (!=): 1 != 2 ## [1] TRUE less-than (&lt;) and greater-than (&gt;): 18 &gt; 44 ## [1] FALSE 3 &lt; 204 ## [1] TRUE Logical Or (||): 1 == 2 || 2 == 2 ## [1] TRUE Logical And (&amp;&amp;): 1 == 2 &amp;&amp; 2 == 2 ## [1] FALSE Objects and Vectors in R Objects R stores everything, variables included, in Objects. x = 2.71 # print the value of an object print(x) ## [1] 2.71 # determine class or internal type of an object class(x) ## [1] &quot;numeric&quot; # TRUE if an object has not been assigned a value is.na(x) ## [1] FALSE Vectors Vectors and Data Frames are the bread and butter of R Vectors are a list of elements of the same type e.g. a list of heart rates, one per patient Data Frames Data Frames are structures that can contain columns of various types e.g. height, weight, age, heart rate, etc. Handy containers for experimental data Analogous to spreadsheet data More on Data Frames throughout the week! Working with Vectors Creating a Vector Use the c() function name = c(&quot;John Doe&quot;,&quot;Jane Smith&quot;,&quot;MacGillicuddy Jones&quot;,&quot;Echo Shamus&quot;) age = c(36,54,82,15) favorite_color = c(&quot;red&quot;, &quot;orange&quot;, &quot;green&quot;, &quot;black&quot;) # pretty print the vectors print(data.frame(name,age,favorite_color),row.names=FALSE) ## name age favorite_color ## John Doe 36 red ## Jane Smith 54 orange ## MacGillicuddy Jones 82 green ## Echo Shamus 15 black Accessing Vector Data Use numerical indexing R uses 1-based indexing 1st vector element has index of 1 2nd has an index of 2 3rd has an index of 3 and so on name[1] ## [1] &quot;John Doe&quot; age[3] ## [1] 82 R supports “slicing” (i.e. extracting multiple items) favorite_color[2:3] ## [1] &quot;orange&quot; &quot;green&quot; Negative indices are omitted age[-2] ## [1] 36 82 15 Some Useful Vector Operations sum() # sum of all element values length() # number of elements unique() # distinct values sort() # sort elements, omitting NAs order() # indices of sorted elements, NAs are last rev() # reverse the order summary() # simple statistics a = c(5,5,6,7,8,4) sum(a) ## [1] 35 length(a) ## [1] 6 unique(a) ## [1] 5 6 7 8 4 sort(a) ## [1] 4 5 5 6 7 8 order(a) ## [1] 6 1 2 3 4 5 a[order(a)[1:6]] ## [1] 4 5 5 6 7 8 rev(a) ## [1] 4 8 7 6 5 5 summary(a) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 4.000 5.000 5.500 5.833 6.750 8.000 Handling Missing Data First consider the reason(s) for the missing data e.g. concentrations that are below detectable levels? Sometimes NAs in data require special statistical methods Other times we can safely discard/ignore NA entries To remove NAs prior to a calculation: y = c(1,NA,3,2,NA) sum(y, na.rm=TRUE) ## [1] 6 Wrapping up day 1 The goal for today was to rapidly cover some of the essential aspects of R programming. For the remainder of the week you’ll work at your own pace to get more of a hands-on deep dive into this material. If you run into trouble please don’t hesiate to ask for help via Teams (QuaRantine Team), slack (QuaRantine Course), or email (Drs. Matott and Morgan) — whatever works best for you! 1.2 Day 2: Vectors and variables Our overall goal for the next few days is to use R to create a daily log of quarantine activities. Our goal for today is to become familiar with R vectors. Along the way we’ll probably make data entry and other errors that will start to get us comfortable with R. If you run into problems, reach out to the slack channel for support! The astronaut Scott Kelly said that to survive a year on the International Space Station he found it essential to Follow a schedule – plan your day, and stick to the plan Pace yourselves – you’ve got a long time to accomplish tasks, so don’t try to get everything done in the first week. Go outside – if Scott can head out to space, we should be able to make it to the back yard or around the block! Get a hobby – something not work related, and away from that evil little screen. Maybe it’s as simple as rediscovering the joy of reading. Keep a journal Take time to connect – on a human level, with people you work with and people you don’t! Listen to experts – Scott talked about relying on the mission controllers; for us maybe that’s watching webinars or taking courses in new topics! Wash your hands! I wanted to emphasize ‘follow a schedule’ and ‘keep a journal’. How can R help? Well, I want to create a short record of how I spend today, day 2 of my quarantine. My first goal is to create vectors describing things I plan to do today. Let’s start with some of these. To get up to speed, type the following into the R console, at the &gt; prompt 1 + 2 Press the carriage return and remind yourself that R is a calculator, and knows how to work with numbers! Now type an activity in your day, for instance I often start with &quot;check e-mail&quot; Now try assigning that to a variable, and displaying the variable, e.g., activity &lt;- &quot;check e-mail&quot; activity ## [1] &quot;check e-mail&quot; OK, likely you have several activities scheduled. Create a vector of a few of these by concatenating individual values c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;) ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; &quot;webinar&quot; Assign these to a variable activity &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;walk&quot;) activity ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; &quot;webinar&quot; ## [5] &quot;walk&quot; Create another vector, but this time the vector should contain the minutes spent on each activity minutes &lt;- c(20, 30, 60, 60, 60) minutes ## [1] 20 30 60 60 60 So I spent 20 minutes checking email, 30 minutes having breakfast and things like that, I was in a conference call for 60 minutes, and then attended a webinar where I learned new stuff for another 60 minutes. Finally I went for a walk to clear my head and remember why I’m doing things. Apply some basic functions to the variables, e.g., use length() to demonstrate that you for each activity you have recorded the minutes. length(activity) ## [1] 5 length(minutes) ## [1] 5 Use tail() to select the last two activities (or head() to select the first two…) tail(activity, 2) ## [1] &quot;webinar&quot; &quot;walk&quot; tail(minutes, 2) ## [1] 60 60 R has other types of vectors. Create a logical vector that indicates whether each activity was ‘work’ activity’ or something you did for your own survival. We’ll say that checking email is a work-related activity! is_work &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE) is_work ## [1] TRUE FALSE TRUE TRUE FALSE Alternatively, classify the activities into categories inspired by Astronaut Scott’s guidance like connect with others, go outside and exercise, consult experts, get a hobby, and (my own category, I guess) perform essential functions like eating and sleeping. classification &lt;- c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;exercise&quot;) I want to emphasize a difference between the activity and classification variables. I want activity to be a character vector that could contain any description of an activity. But I want classification to be terms only from a limited set of possibilities. In R, classification is a special type of vector called a factor, and I create a factor by enumerating the possible levels (values) that the factor can take on levels &lt;- c(&quot;connect&quot;, &quot;exercise&quot;, &quot;consult&quot;, &quot;hobby&quot;, &quot;essential&quot;) And then tell R that the vector classification should be a factor with values taken from a particular set of levels classification &lt;- factor( c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;exercise&quot;), levels = levels ) classification ## [1] connect essential connect consult exercise ## Levels: connect exercise consult hobby essential Notice that activity (a character vector) displays differently from classification (a factor) activity ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; &quot;webinar&quot; ## [5] &quot;walk&quot; classification ## [1] connect essential connect consult exercise ## Levels: connect exercise consult hobby essential Also, some of the levels (e.g., hobby) have not been part of our schedule yet, but the factor still ‘knows’ about the level. Notice also what happens when you try to use a value that is not a level of a factor factor(c(&quot;connect&quot;, &quot;disconnect&quot;), levels = levels) ## [1] connect &lt;NA&gt; ## Levels: connect exercise consult hobby essential The value with the unknown level is displayed as NA, for not known. NA values can be present in any vector, e.g., c(1, 2, NA, 4) ## [1] 1 2 NA 4 c(&quot;walk&quot;, &quot;talk&quot;, NA) ## [1] &quot;walk&quot; &quot;talk&quot; NA c(NA, TRUE, FALSE, TRUE, TRUE) ## [1] NA TRUE FALSE TRUE TRUE This serves as an indication that the value is simply not available. Use NA rather than adopting some special code (e.g., ‘-99’) to indicate when a value is not available. One other type of vector we will work a lot with are dates. All of my activities are for today, so I’ll start with a character vector with the same length as my activity vector, each indicating the date in a consistent month-day-year format dates &lt;- c(&quot;04-14-2020&quot;, &quot;04-14-2020&quot;, &quot;04-14-2020&quot;, &quot;04-14-2020&quot;, &quot;04-14-2020&quot;) dates ## [1] &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; Incidentally, I could do this more efficiently using the replicate function rep(&quot;04-14-2020&quot;, 5) ## [1] &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; And even better use length() to know for sure how many times I should replicate the character vector rep(&quot;04-14-2020&quot;, length(activity)) ## [1] &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; dates is a character vector, but it has specially meaning as a calendar date, R has a Date class that knows how to work with dates. We will coerce date to an object of class Date using a function as.Date. Here’s our first attempt… as.Date(dates) … but this results in an error: Error in charToDate(x) : character string is not in a standard unambiguous format R doesn’t know the format (month-day-year) of the dates we provide. The solution is to add a second argument to as.Date(). The second argument is a character vector that describes the date format. The format we use is &quot;%m-%d-%Y&quot;, which says that we provide the %month first, then a hyphen, then the %day, another hyphen, and finally the four-digit %Year. as.Date(dates, format = &quot;%m-%d-%y&quot;) ## [1] &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; Notice that the format has been standardized to year-month-day. Also notice that although the original value of date and the return from asData() look the same, they are actually of different class. class(date) ## [1] &quot;function&quot; class(as.Date(dates, format = &quot;%m-%d-%Y&quot;)) ## [1] &quot;Date&quot; R will use this information to enable specialized calculation on dates, e.g., to sort them or to determine the number of days between different dates. So here’s our date vector as a Date object. dates &lt;- rep(&quot;04-14-2020&quot;, length(activity)) date &lt;- as.Date(dates, format = &quot;%m-%d-%Y&quot;) date ## [1] &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; OK, time for a walk! See you tomorrow! 1.3 Day 3: The data.frame Add to a data.frame. Basic statistical summary and visualization. 1.4 Day 4: Essential data manipulation 1.5 Day 5 (Friday) Zoom check-in Participant progress / challenges. Introduction to a COVID-19 data set documenting cases reported in the US. 1.5.1 Review and trouble shoot (25 minutes) 1.5.2 Next week (25 minutes) R Scripts Some of you may have already started saving your R commands as script files. As the material gets more complicated (and more interesting) everyone will want to start doing this. Here is an example to get you started: In RStudio, click “File –&gt; New File –&gt; R Script” to create a new script file and open it in the editor By convention, R scripts have a .R exstension (e.g. my_script.R) In RStudio, click into your untitled script and click “File –&gt; Save” Name your file something fun like my_first_script.R and save it Use the # character for comments. Enter the following into your R Script file: # This is my first R script Use a semi-colon ; (or a newline) to separate commands. Add the following to your R Script file: x = &quot;Hello world!&quot;; y = &#39;Today is&#39;; d = format(Sys.Date(),&quot;%b %d, %Y&quot;) cat(x, y, d) Use the “Run” button in RStudio to run the highlighted portion of an R script file. Try this on your simple R Script. ## Hello world! Today is Apr 09, 2020 Alternatively, use “Run –&gt; Run All” to run an entire script file. 1.6 Day 6 Installing tidyverse 1.7 Day 7 Input COVID-19 data. Statistical summary. "]
]
