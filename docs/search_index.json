[
["index.html", "40 Days and 40 Nights Motivation Introduction What to expect", " 40 Days and 40 Nights Martin Morgan L. Shawn Matott 2020-04-16 Motivation This is a WORK IN PROGRESS. This course was suggested and enabled by Adam Kisailus and Richard Hershberger. It is available for Roswell Park graduate students. Introduction The word ‘quarantine’ is from the 1660’s and refers to the fourty days (Italian quaranta giorni) a ship suspected of carrying disease was kept in isolation. What to do in a quarantine? The astronaut Scott Kelly spent nearly a year on the International Space Station. In a New York Times opinion piece he says, among other things, that ‘you need a hobby’, and what better hobby than a useful one? Let’s take the opportunity provided by COVID-19 to learn R for statistical analysis and comprehension of data. Who knows, it may be useful after all this is over! What to expect We’ll meet via zoom twice a week, Mondays and Fridays, for one hour. We’ll use this time to make sure everyone is making progress, and to introduce new or more difficult topics. Other days we’ll have short exercises and activities that hopefully provide an opportunity to learn at your own speed. We haven’t thought this through much, but roughly we might cover: Week 1: We’ll start with the basics of installing and using R. We’ll set up R and RStudio on your local computer, or if that doesn’t work use a cloud-based RStudio. We’ll learn the basics of R – numeric, character, logical, and other vectors; variables; and slightly more complicated representations of ‘factors’ and dates. We’ll also use RStudio to write a script that allows us to easily re-create an analysis, illustrating the power concept of reproducible research. activity &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;walk&quot;) minutes_per_activity &lt;- c(20, 30, 60, 60, 60) minutes_per_activity &gt;= 60 ## [1] FALSE FALSE TRUE TRUE TRUE activity[minutes_per_activity &gt;= 60] ## [1] &quot;conference call&quot; &quot;webinar&quot; &quot;walk&quot; Week 2: The data.frame. This week is all about R’s data.frame, a versatile way of representing and manipulating a table (like an Excel spreadsheet) of data. We’ll learn how to create, write, and read a data.frame; how to go from data in a spreadsheet in Excel to a data.frame in R; and how to perform simple manipulations on a data.frame, like creating a subset of data, summarizing values in a column, and summarizing values in one column based on a grouping variable in another column. url = &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv&quot; cases &lt;- read.csv(url) erie &lt;- subset(cases, county == &quot;Erie&quot; &amp; state == &quot;New York&quot;) tail(erie) ## date county state fips cases deaths ## 47417 2020-04-10 Erie New York 36029 1409 58 ## 50071 2020-04-11 Erie New York 36029 1472 62 ## 52744 2020-04-12 Erie New York 36029 1571 75 ## 55428 2020-04-13 Erie New York 36029 1624 86 ## 58128 2020-04-14 Erie New York 36029 1668 99 ## 60844 2020-04-15 Erie New York 36029 1751 110 Week 3: Packages for extending R. A great strength of R is its extensibility through packages. We’ll learn about CRAN, and install and use the ‘tidyverse’ suite of packages. The tidyverse provides us with an alternative set of tools for working with tabular data, and We’ll use publicly available data to explore the spread of COVID-19 in the US. We’ll read, filter, mutate (change), and select subsets of the data, and group data by one column (e.g., ‘state’) to create summaries (e.g., cases per state). We’ll also start to explore data visualization, creating our first plots of the spread of COVID-19. library(dplyr) library(ggplot2) ## ...additional commands Week 4: Maps. This week will be a specialized topic, tackling relatively advanced challenges associated with spatial visualization. Week 5: Bioinformatic analysis with Bioconductor. Bioconductor is a collection of more than 1800 R packages for the statistical analysis and comprehension of high-throughput genomic data. We’ll use Bioconductor to look at COVID-19 genome sequences, and to explore emerging genomic data relevant to the virus. Week 6: COVID-19 has really shown the value of open data and collaboration. In the final week of our quarantine, we’ll explore collaboration; developing independent and group projects that synthesize the use of R to explore data. We’ll learn tools of collaboration including git and github, and develop ‘best practices’ for robust, reproducible research. We’ll learn about writing ‘markdown’ reports to share our project with others. "],
["one.html", "Week 1 Basics 1.1 Day 1 (Monday) Zoom orientation 1.2 Day 2: Vectors and variables 1.3 Day 3: factor(), Date(), and NA 1.4 Day 4: Working with variables 1.5 Day 5 (Friday) Zoom check-in 1.6 Day 6: R scripts 1.7 Day 7: Saving data", " Week 1 Basics 1.1 Day 1 (Monday) Zoom orientation 1.1.1 Logistics (10 minutes) Course material Available at https://mtmorgan.github.io/QuaRantine Cadence Monday and Friday group zoom sessions – these will review and troubleshoot previous material, and outline goals for the next set of independent activities. Daily independent activities – most of your learning will happen here! Communicating We’ll use Microsoft Teams (if most participants have access to the course) Visit Microsoft teams and sign in with your Roswell username (e.g., MA38727@RoswellPark.org) and the password you use to check email, etc. Join the ‘QuaRantine’ team. 1.1.2 Installing R and RStudio (25 minutes, Shawn) What is R? A programming language for statistical computing, data analysis and scientific graphics. Open-source with a large (and growing) user community. Currently in the top 10 most popular languages according to the tiobe index. What is RStudio? RStudio provides an integrated editor and shell environment to make R programming easier. Some of the more useful features include: Syntax highlighting and color coding Easy switching between shell and editor Dynamic help and docs Installing R and RStudio Two ways to “get” RStudio: Install on your laptop or desktop Download the free desktop installer here Use the rstudio.cloud resource Visit rstudio.cloud, sign-up, and sign-on The preferred approach for this course is to try to install R and RStudio on your own computer Windows Users: Download R for Windows and run the installer. Avoid, if possible, installing as administrator. Download RStudio for Windows and run the installer. Test the installation by launching RStudio. You should end up with a window like the screen shot below. Mac Users: Download R for macOS (OS X 10.11, El Capitan, and later) or older macOS and run the installer. Download RStudio for macOS and run the installer. Test the installation by launching RStudio. You should end up with a window like the screen shot below. An ALTERNATIVE, if installing on your own computer does not work: Do the following only if you are NOT ABLE TO INSTALL R and RStudio. Visit rstudio.cloud. Click the ‘Get Started’ button, and create an account (I used my gmail account…). You should end up at a screen like the following. Click on the ‘New Project’ button, to end up with a screen like the one below. Note the ‘Untitled Project’ at the top of the screen; click on it to name your project, e.g., ‘QuaRantine’. Breakout Room At this point you should have RStudio running either via your desktop installation or through rstudio.cloud. If not, please let us know via the chat window and we’ll invite you to a breakout room to troubleshoot your installation. 1.1.3 Basics of R (25 minutes) R as a simple calculator 1 + 2 ## [1] 3 R Console Output Enter this in the console: 2 + 3 * 5 ## [1] 17 Q: what’s the [1] all about in the output? A: It’s the index of the first entry in each line. This is maybe a better example: 1:30 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## [26] 26 27 28 29 30 Displaying help in the R Console ? &lt;command-name&gt; Some examples: ? cat ? print Variables Naming variables in R A variable name can contain letters, numbers, and the dot . or underline _ characters. Variables should start with a letter. Try entering these in the console: y = 2 try.this = 33.3 oneMoreTime = &quot;woohoo&quot; Now try these: 2y = 2 _z = 33.3 function = &quot;oops, my bad&quot; R is case sensitive (R != r) R = 2 r = 3 R == r ## [1] FALSE Variable Assignment You may use = or &lt;- (and even -&gt;) to assign values to a variable. x &lt;- 2 + 3 * 5 y = 2 + 3 * 6 2 + 3 * 7 -&gt; z cat(x, y, z) ## 17 20 23 R’s four basic ‘atomic’ data types Numeric (includes integer, double, etc.) 3.14, 1, 2600 Character (string) &quot;hey, I'm a string&quot; 'single quotes are ok too' Logical TRUE or FALSE (note all caps) NA not assigned (no known value) Use class() to query the class of data: a &lt;- 5 class(a) ## [1] &quot;numeric&quot; Use as. to coerce a variable to a specific data type a &lt;- as.integer(5) class(a) ## [1] &quot;integer&quot; d &lt;- as.logical(a) d ## [1] TRUE class(d) ## [1] &quot;logical&quot; Using Logical Operators Equivalence test (==): 1 == 2 ## [1] FALSE Not equal test (!=): 1 != 2 ## [1] TRUE less-than (&lt;) and greater-than (&gt;): 18 &gt; 44 ## [1] FALSE 3 &lt; 204 ## [1] TRUE Logical Or (|): (1 == 2) | (2 == 2) ## [1] TRUE Logical And (&amp;): (1 == 2) &amp; (2 == 2) ## [1] FALSE Objects and Vectors in R Objects R stores everything, variables included, in ‘objects’. x &lt;- 2.71 # print the value of an object print(x) ## [1] 2.71 # determine class or internal type of an object class(x) ## [1] &quot;numeric&quot; # TRUE if an object has not been assigned a value is.na(x) ## [1] FALSE Vectors ‘Vectors’ and ‘data frames’ are the bread and butter of R Vectors consist of several elements of the same class e.g. a vector of heart rates, one per patient Data frames (data.frame) Data frames are structures that can contain columns of various types e.g. height, weight, age, heart rate, etc. Handy containers for experimental data Analogous to spreadsheet data More on Data Frames throughout the week! Working with Vectors Creating a Vector Use the c() function name &lt;- c(&quot;John Doe&quot;, &quot;Jane Smith&quot;, &quot;MacGillicuddy Jones&quot;, &quot;Echo Shamus&quot;) age &lt;- c(36, 54, 82, 15) favorite_color &lt;- c(&quot;red&quot;, &quot;orange&quot;, &quot;green&quot;, &quot;black&quot;) ## print the vectors name ## [1] &quot;John Doe&quot; &quot;Jane Smith&quot; &quot;MacGillicuddy Jones&quot; ## [4] &quot;Echo Shamus&quot; age ## [1] 36 54 82 15 favorite_color ## [1] &quot;red&quot; &quot;orange&quot; &quot;green&quot; &quot;black&quot; Accessing vector data Use numerical indexing R uses 1-based indexing 1st vector element has index of 1 2nd has an index of 2 3rd has an index of 3 and so on name[1] ## [1] &quot;John Doe&quot; age[3] ## [1] 82 R supports “slicing” (i.e. extracting multiple items) favorite_color[c(2, 3)] ## [1] &quot;orange&quot; &quot;green&quot; Negative indices are omitted age[-2] ## [1] 36 82 15 Some Useful Vector Operations length(): number of elements sum(): sum of all element values unique(): distinct values sort(): sort elements, omitting NAs order(): indices of sorted elements, NAs are last rev(): reverse the order summary(): simple statistics a &lt;- c(5, 5, 6, 7, 8, 4) sum(a) ## [1] 35 length(a) ## [1] 6 unique(a) ## [1] 5 6 7 8 4 sort(a) ## [1] 4 5 5 6 7 8 order(a) ## [1] 6 1 2 3 4 5 a[order(a)] ## [1] 4 5 5 6 7 8 rev(a) ## [1] 4 8 7 6 5 5 summary(a) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 4.000 5.000 5.500 5.833 6.750 8.000 Handling Missing Data First consider the reason(s) for the missing data e.g. concentrations that are below detectable levels? Sometimes NAs in data require special statistical methods Other times we can safely discard / ignore NA entries To remove NAs prior to a calculation: y = c(1,NA,3,2,NA) sum(y, na.rm=TRUE) ## [1] 6 Wrapping up day 1 The goal for today was to rapidly cover some of the essential aspects of R programming. For the remainder of the week you’ll work at your own pace to get more of a hands-on deep dive into this material. If you run into trouble please don’t hesiate to ask for help via Teams (QuaRantine Team), slack (QuaRantine Course), or email (Drs. Matott and Morgan) — whatever works best for you! 1.2 Day 2: Vectors and variables Our overall goal for the next few days is to use R to create a daily log of quarantine activities. Our goal for today is to become familiar with R vectors. Along the way we’ll probably make data entry and other errors that will start to get us comfortable with R. If you run into problems, reach out to the slack channel for support! The astronaut Scott Kelly said that to survive a year on the International Space Station he found it essential to Follow a schedule – plan your day, and stick to the plan Pace yourselves – you’ve got a long time to accomplish tasks, so don’t try to get everything done in the first week. Go outside – if Scott can head out to space, we should be able to make it to the back yard or around the block! Get a hobby – something not work related, and away from that evil little screen. Maybe it’s as simple as rediscovering the joy of reading. Keep a journal Take time to connect – on a human level, with people you work with and people you don’t! Listen to experts – Scott talked about relying on the mission controllers; for us maybe that’s watching webinars or taking courses in new topics! Wash your hands! I wanted to emphasize ‘follow a schedule’ and ‘keep a journal’. How can R help? Well, I want to create a short record of how I spend today, day 2 of my quarantine. My first goal is to create vectors describing things I plan to do today. Let’s start with some of these. To get up to speed, type the following into the R console, at the &gt; prompt 1 + 2 Press the carriage return and remind yourself that R is a calculator, and knows how to work with numbers! Now type an activity in your day, for instance I often start with &quot;check e-mail&quot; Now try assigning that to a variable, and displaying the variable, e.g., activity &lt;- &quot;check e-mail&quot; activity ## [1] &quot;check e-mail&quot; OK, likely you have several activities scheduled. Create a vector of a few of these by concatenating individual values c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;walk&quot;) ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; &quot;webinar&quot; ## [5] &quot;walk&quot; Assign these to a variable activity &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;walk&quot;) activity ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; &quot;webinar&quot; ## [5] &quot;walk&quot; Create another vector, but this time the vector should contain the minutes spent on each activity minutes &lt;- c(20, 30, 60, 60, 60) minutes ## [1] 20 30 60 60 60 So I spent 20 minutes checking email, 30 minutes having breakfast and things like that, I was in a conference call for 60 minutes, and then attended a webinar where I learned new stuff for another 60 minutes. Finally I went for a walk to clear my head and remember why I’m doing things. Apply some basic functions to the variables, e.g., use length() to demonstrate that you for each activity you have recorded the minutes. length(activity) ## [1] 5 length(minutes) ## [1] 5 Use tail() to select the last two activities (or head() to select the first two…) tail(activity, 2) ## [1] &quot;webinar&quot; &quot;walk&quot; tail(minutes, 2) ## [1] 60 60 R has other types of vectors. Create a logical vector that indicates whether each activity was ‘work’ activity’ or something you did for your own survival. We’ll say that checking email is a work-related activity! is_work &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE) is_work ## [1] TRUE FALSE TRUE TRUE FALSE 1.3 Day 3: factor(), Date(), and NA Yesterday we learned about character, numeric, and logical vectors in R (you may need to revisit previous notes and re-create these variables) activity ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; &quot;webinar&quot; ## [5] &quot;walk&quot; minutes ## [1] 20 30 60 60 60 is_work ## [1] TRUE FALSE TRUE TRUE FALSE Today we will learn about slightly more complicated vectors. We created the logical vector is_work to classify each activity as either work-related or not. What if we had several different categories? For instance, we might want to classify the activities into categories inspired by astronaut Kelly’s guidance. Categories might include: connect with others; go outside and exercise; consult experts; get a hobby; and (my own category, I guess) perform essential functions like eating and sleeping. So the values of activity could be classified as classification &lt;- c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;exercise&quot;) I want to emphasize a difference between the activity and classification variables. I want activity to be a character vector that could contain any description of an activity. But I want classification to be terms only from a limited set of possibilities. In R, I want classification to be a special type of vector called a factor, with the values of the vector restricted to a set of possible levels that I define. I create a factor by enumerating the possible levels that the factor can take on levels &lt;- c(&quot;connect&quot;, &quot;exercise&quot;, &quot;consult&quot;, &quot;hobby&quot;, &quot;essential&quot;) And then tell R that the vector classification should be a factor with values taken from a particular set of levels classification &lt;- factor( c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;exercise&quot;), levels = levels ) classification ## [1] connect essential connect consult exercise ## Levels: connect exercise consult hobby essential Notice that activity (a character vector) displays differently from classification (a factor) activity ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; &quot;webinar&quot; ## [5] &quot;walk&quot; classification ## [1] connect essential connect consult exercise ## Levels: connect exercise consult hobby essential Also, some of the levels (e.g., hobby) have not been part of our schedule yet, but the factor still ‘knows’ about the level. Notice also what happens when I try to use a value (disconnect) that is not a level of a factor factor(c(&quot;connect&quot;, &quot;disconnect&quot;), levels = levels) ## [1] connect &lt;NA&gt; ## Levels: connect exercise consult hobby essential The value with the unknown level is displayed as NA, for ‘not known’. NA values can be present in any vector, e.g., c(1, 2, NA, 4) ## [1] 1 2 NA 4 c(&quot;walk&quot;, &quot;talk&quot;, NA) ## [1] &quot;walk&quot; &quot;talk&quot; NA c(NA, TRUE, FALSE, TRUE, TRUE) ## [1] NA TRUE FALSE TRUE TRUE This serves as an indication that the value is simply not available. Use NA rather than adopting some special code (e.g., ‘-99’) to indicate when a value is not available. One other type of vector we will work a lot with are dates. All of my activities are for today, so I’ll start with a character vector with the same length as my activity vector, each indicating the date in a consistent month-day-year format dates &lt;- c(&quot;04-14-2020&quot;, &quot;04-14-2020&quot;, &quot;04-14-2020&quot;, &quot;04-14-2020&quot;, &quot;04-14-2020&quot;) dates ## [1] &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; Incidentally, I could do this more efficiently using the replicate function rep(&quot;04-14-2020&quot;, 5) ## [1] &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; And even better use length() to know for sure how many times I should replicate the character vector rep(&quot;04-14-2020&quot;, length(activity)) ## [1] &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; &quot;04-14-2020&quot; dates is a character vector, but it has specially meaning as a calendar date, R has a Date class that knows how to work with dates, for instance to calculate the number of days between two dates. We will coerce date to an object of class Date using a function as.Date. Here’s our first attempt… as.Date(dates) … but this results in an error: Error in charToDate(x) : character string is not in a standard unambiguous format R doesn’t know the format (month-day-year) of the dates we provide. The solution is to add a second argument to as.Date(). The second argument is a character vector that describes the date format. The format we use is &quot;%m-%d-%Y&quot;, which says that we provide the %month first, then a hyphen, then the %day, another hyphen, and finally the four-digit %Year. as.Date(dates, format = &quot;%m-%d-%Y&quot;) ## [1] &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; Notice that the format has been standardized to year-month-day. Also notice that although the original value of date and the return from as.Data() look the same, they are actually of different class. class(date) ## [1] &quot;function&quot; class(as.Date(dates, format = &quot;%m-%d-%Y&quot;)) ## [1] &quot;Date&quot; R will use the information about class to enable specialized calculation on dates, e.g., to sort them or to determine the number of days between different dates. So here’s our date vector as a Date object. dates &lt;- rep(&quot;04-14-2020&quot;, length(activity)) date &lt;- as.Date(dates, format = &quot;%m-%d-%Y&quot;) date ## [1] &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; OK, time for a walk! See you tomorrow! 1.4 Day 4: Working with variables Remember that R can act as a simple calculator, and that one can create new variables by assignment x &lt;- 1 x + 1 ## [1] 2 y &lt;- x + 1 y ## [1] 2 Let’s apply these ideaas to our minutes vector from earlier in the week. minutes &lt;- c(20, 30, 60, 60, 60) We can perform basic arithmetic on vectors. Suppose we wanted to increase the time of each activity by 5 minutes minutes + 5 ## [1] 25 35 65 65 65 or to increase the time of the first two activities by 5 minutes, and the last three activities by 10 minutes minutes + c(5, 5, 10, 10, 10) ## [1] 25 35 70 70 70 R has a very large number of functions that can be used on vectors. For instance, the average time spent on activities is mean(minutes) ## [1] 46 while the total amount of time is sum(minutes) ## [1] 230 Explore other typical mathematical transformations, e.g., log(), log10(), sqrt() (square root), … Check out the help pages for each, e.g., ?log. Explore the consequences of NA in a vector for functions like mean() and sum(). x &lt;- c(1, 2, NA, 3) mean(x) ## [1] NA R is saying that, since there is an unknown (NA) value in the vector, it cannot possibly know what the mean is! Tell R to remove the missing values before performing the calculation by adding the na.rm = TRUE argument mean(x, na.rm = TRUE) ## [1] 2 Check out the help page ?mean to find a description of the na.rm and other arguments. It’s possible to perform logical operations on vectors, e.g., to ask which activities lasted 60 minutes or more minutes &gt;= 60 ## [1] FALSE FALSE TRUE TRUE TRUE Here’s our activity vector activity &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;walk&quot;) The elements of this vector are numbered from 1 to 5. We can create a new vector that is a subset of this vector using [ and an integer index, e.g., the second activity is activity[2] ## [1] &quot;breakfast&quot; The index can actually be a vector, so we could choose the second and fourth activity as index &lt;- c(2, 4) activity[index] ## [1] &quot;breakfast&quot; &quot;webinar&quot; In fact, we can use logical vectors for subsetting. Consider the activities that take sixty minutes or longer: index &lt;- minutes &gt;= 60 activity[index] ## [1] &quot;conference call&quot; &quot;webinar&quot; &quot;walk&quot; We had previously characterized the activities as ‘work’ or otherwise. is_work &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE) Use is_work to subset activity and identify the work-related activities activity[is_work] ## [1] &quot;check e-mail&quot; &quot;conference call&quot; &quot;webinar&quot; How many minutes were work-related? work_minutes &lt;- minutes[is_work] sum(work_minutes) ## [1] 140 What about not work related? ! negates logical vectors, so is_work ## [1] TRUE FALSE TRUE TRUE FALSE !is_work ## [1] FALSE TRUE FALSE FALSE TRUE non_work_minutes &lt;- minutes[!is_work] sum(non_work_minutes) ## [1] 90 Note that it doesn’t make sense to take the mean() of a character vector like activity, and R signals a warning and returns NA mean(activity) ## Warning in mean.default(activity): argument is not numeric or logical: returning ## NA ## [1] NA Nonetheless, there are many functions that do work on character vectors, e.g., the number of letters in each element nchar(), or transformation to upper-case nchar(activity) ## [1] 12 9 15 7 4 toupper(activity) ## [1] &quot;CHECK E-MAIL&quot; &quot;BREAKFAST&quot; &quot;CONFERENCE CALL&quot; &quot;WEBINAR&quot; ## [5] &quot;WALK&quot; 1.5 Day 5 (Friday) Zoom check-in 1.5.1 Review and trouble shoot (25 minutes; Martin) Data representations ‘Atomic’ vectors activity &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;walk&quot;) minutes &lt;- c(20, 30, 60, 60, 60) is_work &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE) factor() and date() levels &lt;- c(&quot;connect&quot;, &quot;exercise&quot;, &quot;consult&quot;, &quot;hobby&quot;, &quot;essential&quot;) classification &lt;- factor( c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;exercise&quot;), levels = levels ) dates &lt;- rep(&quot;04-14-2020&quot;, length(activity)) date &lt;- as.Date(dates, format = &quot;%m-%d-%Y&quot;) Missing values x &lt;- c(1, 3, NA, 5) sum(x) ## [1] NA sum(x, na.rm = TRUE) ## [1] 9 factor(c(&quot;connect&quot;, &quot;disconnect&quot;), levels = levels) ## [1] connect &lt;NA&gt; ## Levels: connect exercise consult hobby essential Functions and logical operators x &lt;- c(1, 3, NA, 5) sum(x) ## [1] NA sum(x, na.rm = TRUE) ## [1] 9 minutes &gt;= 60 ## [1] FALSE FALSE TRUE TRUE TRUE Subsetting vectors 1-basaed numeric indexes activity ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; &quot;webinar&quot; ## [5] &quot;walk&quot; idx &lt;- c(1, 3, 1) activity[idx] ## [1] &quot;check e-mail&quot; &quot;conference call&quot; &quot;check e-mail&quot; logical index is_work ## [1] TRUE FALSE TRUE TRUE FALSE activity[is_work] ## [1] &quot;check e-mail&quot; &quot;conference call&quot; &quot;webinar&quot; sum(minutes[is_work]) ## [1] 140 Maybe more interesting… short &lt;- minutes &lt; 60 short ## [1] TRUE TRUE FALSE FALSE FALSE minutes[short] ## [1] 20 30 activity[short] ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; Other fun topics %in%: a binary operator is each of the vector elements on the left-hand side in the set of elements on the right hand side fruits &lt;- c(&quot;banana&quot;, &quot;apple&quot;, &quot;grape&quot;, &quot;orange&quot;, &quot;kiwi&quot;) c(&quot;apple&quot;, &quot;orange&quot;, &quot;hand sanitizer&quot;) %in% fruits ## [1] TRUE TRUE FALSE named vectors (see Annual Estimates… table from census.gov) Define a named vector state_populations &lt;- c( Alabama = 4903185, Alaska = 731545, Arizona = 7278717, Arkansas = 3017804, California = 39512223, Colorado = 5758736, Connecticut = 3565287, Delaware = 973764, `District of Columbia` = 705749, Florida = 21477737, Georgia = 10617423, Hawaii = 1415872, Idaho = 1787065, Illinois = 12671821, Indiana = 6732219, Iowa = 3155070, Kansas = 2913314, Kentucky = 4467673, Louisiana = 4648794, Maine = 1344212, Maryland = 6045680, Massachusetts = 6892503, Michigan = 9986857, Minnesota = 5639632, Mississippi = 2976149, Missouri = 6137428, Montana = 1068778, Nebraska = 1934408, Nevada = 3080156, `New Hampshire` = 1359711, `New Jersey` = 8882190, `New Mexico` = 2096829, `New York` = 19453561, `North Carolina` = 10488084, `North Dakota` = 762062, Ohio = 11689100, Oklahoma = 3956971, Oregon = 4217737, Pennsylvania = 12801989, `Rhode Island` = 1059361, `South Carolina` = 5148714, `South Dakota` = 884659, Tennessee = 6829174, Texas = 28995881, Utah = 3205958, Vermont = 623989, Virginia = 8535519, Washington = 7614893, `West Virginia` = 1792147, Wisconsin = 5822434, Wyoming = 578759 ) Computations on named vectors ## US population sum(state_populations) ## [1] 328239523 ## smallest states head(sort(state_populations)) ## Wyoming Vermont District of Columbia ## 578759 623989 705749 ## Alaska North Dakota South Dakota ## 731545 762062 884659 ## largest states head(sort(state_populations, decreasing = TRUE)) ## California Texas Florida New York Pennsylvania Illinois ## 39512223 28995881 21477737 19453561 12801989 12671821 ## states with more than 10 million people big &lt;- state_populations[state_populations &gt; 10000000] big ## California Florida Georgia Illinois New York ## 39512223 21477737 10617423 12671821 19453561 ## North Carolina Ohio Pennsylvania Texas ## 10488084 11689100 12801989 28995881 names(big) ## [1] &quot;California&quot; &quot;Florida&quot; &quot;Georgia&quot; &quot;Illinois&quot; ## [5] &quot;New York&quot; &quot;North Carolina&quot; &quot;Ohio&quot; &quot;Pennsylvania&quot; ## [9] &quot;Texas&quot; Subset by name ## populations of California and New York state_populations[c(&quot;California&quot;, &quot;New York&quot;)] ## California New York ## 39512223 19453561 1.5.2 Weekend activities (25 minutes; Shawn) Writing R scripts R scripts are convenient text files that we can use to save one or more lines of R syntax. Over the weekend you will get some experience working with R scripts. The example below will help you be a bit more prepared. In RStudio, click File --&gt; New File --&gt; R Script to create a new script file and open it in the editor. If you’ve followed the daily coding activities throughout the week, you should have some R code that keeps track of your daily activities. If so, enter that code into your R script now. Otherwise, feel free to use the code below. Look for a copy to clipboard icon in the top-right of the code block. To copy the code block to your R script: Click on the copy to clipboard icon Place your cursor in your R script Click Edit --&gt; Paste: ## ==================================================================== ## day 1 information ## ==================================================================== day1_activity = c(&quot;breakfast&quot;, &quot;check e-mail&quot;, &quot;projects&quot;, &quot;conference call&quot;, &quot;teams meeting&quot;, &quot;lunch&quot;, &quot;conference call&quot;, &quot;webinar&quot;) day1_is_work = c(FALSE,TRUE,TRUE,TRUE,TRUE,FALSE,TRUE,TRUE) day1_minutes = c(30, 75, 120, 30, 60, 30, 60, 120) n = length(day1_activity) day1_total_hours = sum(day1_minutes) / 60 day1_work_hours = sum(day1_minutes[day1_is_work == TRUE]) / 60 cat(&quot;Total time recorded for day 1 : &quot;, day1_total_hours, &quot;hours, over&quot;, n, &quot;activities\\n&quot;) cat(&quot;Total time working for day 1 : &quot;, day1_work_hours, &quot;hours \\n\\n&quot;) Recall the discussion of factors and levels in Day 3; the code below leverages this but adds another level named independent work. If you’ve already got code to assign factors and levels to your daily activity, enter that code into your R script now. Otherwise, feel free to use the code below via the copy to clipboard procedure outlined above: ## ==================================================================== ## Kelly, Morgan, and Matott&#39;s classification strategy ## ==================================================================== kmm_levels = c(&quot;connect&quot;, &quot;exercise&quot;, &quot;consult&quot;, &quot;hobby&quot;, &quot;essential&quot;, &quot;independent work&quot;) ## manually map day 1 activity to appropriate kmm_levels day1_classes = factor( c(&quot;essential&quot;, &quot;connect&quot;, &quot;independent work&quot;, &quot;connect&quot;, &quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;), levels = kmm_levels ) On day 3 you also got some experience working with dates. The code below stamps our day 1 activity data with an appropriately formatted date. If you’ve already got code to assign dates your daily activity, enter that code into your R script now. Otherwise, feel free to use the code below via the copy to clipboard procedure outlined above: ## ==================================================================== ## Assign dates ## ==================================================================== day1_dates = rep(&quot;04-13-2020&quot;,length(day1_activity)) day1_dates = as.Date(day1_dates,format = &quot;%m-%d-%Y&quot;) [OPTIONAL ADVANCED MATERIAL] Earlier today Dr. Morgan touched on named vectors. We can leverage named vectors to create a more general mapping between activities and levels. The code for this is given below. Try it and compare the result to your manual mapping! ## kmm_map is a named vector that maps activities to categories kmm_map = c(&quot;breakfast&quot; = &quot;essential&quot;, &quot;check e-mail&quot; = &quot;connect&quot;, &quot;projects&quot; = &quot;independent work&quot;, &quot;requests&quot; = &quot;independent work&quot;, &quot;conference call&quot; = &quot;connect&quot;, &quot;teams meeting&quot; = &quot;connect&quot;, &quot;lunch&quot; = &quot;essential&quot;, &quot;webinar&quot; = &quot;consult&quot;, &quot;walk&quot; = &quot;exercise&quot;) day1_classes = factor(kmm_map[day1_activity], levels = kmm_levels) Saving R scripts If you’ve been following along you should now have an R script that contains a bunch of code for keeping track of your daily activity log. Let’s save this file: In RStudio, place your cursor anywhere in the script file click File --&gt; Save (or press CTRL+S) Name your file something like daily_activity.R. Running R scripts Now that we’ve created an R script you may be wondering “How do I run the code in the script?” There’s actually a few ways to do this: Option #1 (Run) Highlight the first block of the code (e.g the part where you recorded day 1 activity and maybe calculated amount of time worked). Click the --&gt; Run icon in the top-right portion of the script editor window. This will run the highlighted block of code. The output will appear in the RStudio console window along with an echo of the code itself. Option #2 (Source) Click on the --&gt; Source icon just to the right of the --&gt; Run icon. This will run the entire script. Equivalent to entering into the console source(&quot;daily_activity.R&quot;) Only the output generated by print() and cat() will appear in the RStudio console (i.e. the code in the script is not echoed to the console). Option #3 (Source with Echo) Click on the downward pointing arrowhead next to the source buton to open a dropdown menu In the dropdown menu, sectect Source with Echo This will run the entire script and the code in the script will be echoed to the RStudio console along with any output generated by print() and cat(). The echoed source and the normal output are not color-coded like they are when using the --&gt; Run button. Equivalent to running source(&quot;daily_activity.R&quot;, echo = TRUE, max = Inf) Saving data It can be useful to save objects created in an R script as a data file. These data files can be loaded or re-loaded into a new or existing R session. For example, let’s suppose you had an R script that mined a trove of Twitter feeds for sentiment data related to government responses to COVID-19. Suppose you ran the script for serveral weeks and collected lot’s of valuable data into a bunch of vectors. Even though the R code is saved as a script file, the data that the script is collecting would be lost once script stops running. Furthermore, due to the temporal nature of Twitter feeds, you wouldn’t be able to collect the same data by simply re-running the script. Luckily, R provides several routines for saving and loading objects. Placing the appropriate code in your R script will ensure that your data is preserved even after the script stops running. Saving individual R objects R supports storing a single R object as an .rds file. For example, the code below saves the day1_activity vector to an .rds file. The saveRDS() function is the workhorse in this case and the setwd(), getwd(), and file.path() commands allow us to conveniently specify a name and location for the data file: ## ==================================================================== ## creating .rds data files (for saving individual objects) ## ==================================================================== setwd(&quot;C:/Matott/MyQuarantine&quot;) my_rds_file = file.path(getwd(), &quot;day1_activity.rds&quot;) my_rds_file # print value -- sanity check saveRDS(day1_activity, my_rds_file) Loading individual R objects The complement to the saveRDS() function is the readRDS() function. It loads the R object stored in the specified file. In the example below a data file is loaded and stored as an object named day1_activity_loaded. Compare this object to the existing day1_activity object - they should be the same! ## ==================================================================== ## Reading .rds data files (for loading individual objects) ## ==================================================================== setwd(&quot;C:/Matott/MyQuarantine&quot;) my_rds_file = file.path(getwd() ,&quot;day1_activity.rds&quot;) my_rds_file day1_activity_loaded = readRDS(my_rds_file) # now load from disk Saving multiple R objects The save() function will save one or more objects into a .Rdata file (these are also known as session files). The example below saves various day1 and related factor-level objects to an .Rdata file. ## ==================================================================== ## creating .RData files (for saving multiple objects) ## ==================================================================== setwd(&quot;C:/Matott/MyQuarantine&quot;) my_rdata_file = file.path(getwd(), &quot;day1.rdata&quot;) save(kmm_levels, kmm_map, day1_activity, day1_classes, day1_dates, day1_is_work, day1_minutes, day1_total_hours, day1_work_hours, file = my_rdata_file) If you have many objects that you want to save, listing them all can be tedious. Fortunately, the ls() command provides a list of all objects in the current R session. The results of ls() can be passed along to the save() command and this will result in all objects being saved. An example of the required syntax is given below. setwd(&quot;C:/Matott/MyQuarantine&quot;) my_rdata_file = file.path(getwd(), &quot;day1.rdata&quot;) save(list = ls(), file = my_rdata_file) Loading multiple R objects The complement to the save() function is the load() function. This will load all objects stored in an .Rdata file into the current R session. Example syntax is given below: ## ==================================================================== ## Reading .RData files (for loading multiple objects) ## ==================================================================== setwd(&quot;C:/Matott/MyQuarantine&quot;) my_rdata_file = file.path(getwd(), &quot;daily_activity.rdata&quot;) load(my_rdata_file) # reload It is also possible to load an .Rdata file using the RStudio interface. Click Session --&gt; Load Workspace ... A file browser dialog will open Navigate to the .rdata file and select Wrapping up day 5 Today we reviewed the concepts that you worked with throughout the week during your independent activity. We also troubleshooted any problems or questions that may have come up during this time. Finally, we previewed the creation and use of R scripts and learned about saving and loading objects. Over the weekend you will gain some more experience with these topics. 1.6 Day 6: R scripts Some of you may have already started saving your R commands as script files. As the material gets more complicated (and more interesting) everyone will want to start doing this. Here is an example to get you started: Recall that we can create a script file in RStudio, click “File –&gt; New File –&gt; R Script” to create a new script file and open it in the editor By convention, R scripts have a .R exstension (e.g. my_script.R) In RStudio, click into your untitled script and click “File –&gt; Save” Name your file something fun like my_first_script.R and save it Use the # character for comments. Enter the following into your R Script file: ## This is my first R script Enter each command on a separate line. It’s also possible to enter multiple (short!) commands on a single line, separated by a semi-colon ; x = &quot;Hello world!&quot; y = &#39;Today is&#39;; d = format(Sys.Date(), &quot;%b %d, %Y&quot;) cat(x, y, d) Use the “Run” button in RStudio to run the highlighted portion of an R script file. Try this on your simple R Script. x = &quot;Hello world!&quot;; y = &#39;Today is&#39;; d = format(Sys.Date(),&quot;%b %d, %Y&quot;) cat(x, y, d, &quot;\\n&quot;) ## Hello world! Today is Apr 16, 2020 Alternatively, use “Run –&gt; Run All” to run an entire script file. For today’s exercise, create a script file that summarizes your quarantine activities over several days. Use comments, white space (blank lines and spaces), and variable names to summarize each day. Here’s what I’ve got… ## &#39;classification&#39; factor levels levels &lt;- c(&quot;connect&quot;, &quot;exercise&quot;, &quot;consult&quot;, &quot;hobby&quot;, &quot;essential&quot;) ## Quarantine log, day 1 activity_day_1 &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;walk&quot;) minutes_day_2 &lt;- c(20, 30, 60, 60, 60) is_work_day_2 &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE) classification_day_2 &lt;- factor( c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;exercise&quot;), levels = levels ) date_day_1 &lt;- as.Date(rep(&quot;04-14-2020&quot;, length(activity_day_1)), &quot;%m-%d-%Y&quot;) ## Quarantine log, day 2 activity_day_2 &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;read a book&quot;) minutes_day_2 &lt;- c(20, 30, 60, 60, 60) is_work_day_2 &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE) classification_day_2 &lt;- factor( c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;hobby&quot;), levels = levels ) date_day_2 &lt;- as.Date(rep(&quot;04-15-2020&quot;, length(activity_day_2)), &quot;%m-%d-%Y&quot;) ## Quarantine log, day 3 activity_day_3 &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;webinar&quot;, &quot;read a book&quot;) minutes_day_3 &lt;- c(20, 30, 60, 60) is_work_day_3 &lt;- c(TRUE, FALSE, TRUE, FALSE) classification_day_3 &lt;- factor( c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;hobby&quot;), levels = levels ) date_day_3 &lt;- as.Date(rep(&quot;04-16-2020&quot;, length(activity_day_3)), &quot;%m-%d-%Y&quot;) Try concatenating these values, e.g., activity &lt;- c(activity_day_1, activity_day_2, activity_day_3) activity ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; &quot;webinar&quot; ## [5] &quot;walk&quot; &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; ## [9] &quot;webinar&quot; &quot;read a book&quot; &quot;check e-mail&quot; &quot;breakfast&quot; ## [13] &quot;webinar&quot; &quot;read a book&quot; Save your script, quit R and RStudio, and restart R. Re-open and run the script to re-do your original work. Think about how this makes your work reproducible from one day to the next, and how making your scientific work reproducible would be advantageous. 1.7 Day 7: Saving data We’ve defined these variables activity &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;walk&quot;) minutes &lt;- c(20, 30, 60, 60, 60) is_work &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE) levels &lt;- c(&quot;connect&quot;, &quot;exercise&quot;, &quot;consult&quot;, &quot;hobby&quot;, &quot;essential&quot;) classification &lt;- factor( c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;exercise&quot;), levels = levels ) dates &lt;- rep(&quot;04-14-2020&quot;, length(activity)) date &lt;- as.Date(dates, format = &quot;%m-%d-%Y&quot;) Individual variables can be saved to a file. Define the path to the file. The file extension is, by convention, ‘.rds’. We’ll use a temporary location temporary_file_path &lt;- tempfile(fileext = &quot;.rds&quot;) …but we could have chosen the destination interactively interactive_file_path &lt;- file.choose(new = TRUE) …or provided path relative to the ‘current working directory’, or an absolute file path (use ‘/’ to specify paths on all operating systems, including Windows) getcwd() relative_file_path &lt;- &quot;my_activity.rds&quot; absolute_file_path_on_macOS &lt;- &quot;/Users/ma38727/my_activity.rda&quot; use saveRDS() to save a single object to a file saveRDS(activity, temporary_file_path) use readRDS() to read the object back in activity_from_disk &lt;- readRDS(temporary_file_path) activity_from_disk ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; &quot;webinar&quot; ## [5] &quot;walk&quot; Use save() and load() to save and load several objects. Use .RDaata as the file extension.Usually we would NOT save to a temporary location, because the temporary location would be deleted when we ended our R session. temporary_file_path &lt;- tempfile(fileext = &quot;.RData&quot;) save(activity, minutes, file = temporary_file_path) Remove the objects from the R session, and verify that they are absent rm(activity, minutes) try(activity) # fails -- object not present ## Error in try(activity) : object &#39;activity&#39; not found Load the saved objects load(temporary_file_path) activity ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; &quot;webinar&quot; ## [5] &quot;walk&quot; As an exercise… Chose a location to save your data, e.g., in the current working direcotry getwd() # Where the heck are we? ## [1] &quot;/Users/ma38727/a/github/QuaRantine&quot; my_file_path &lt;- &quot;my_quaRantine.RData&quot; Save the data save(activity, minutes, is_work, classification, date, file = my_file_path) Now the moment of truth. Quit R without saving your workspace quit(save = FALSE) Start a new session of R, and verify that your objects are not present ls() # list objects available in the &#39;.GlobalEnv&#39; -- there should be none ## character(0) try(activity) # nope, not there... ## Error in try(activity) : object &#39;activity&#39; not found Create a path to the saved data file my_file_path &lt;- &quot;my_quaRantine.RData&quot; Load the data and verify that it is correct load(my_file_path) activity ## [1] &quot;check e-mail&quot; &quot;breakfast&quot; &quot;conference call&quot; &quot;webinar&quot; ## [5] &quot;walk&quot; minutes ## [1] 20 30 60 60 60 is_work ## [1] TRUE FALSE TRUE TRUE FALSE date ## [1] &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; &quot;2020-04-14&quot; classification ## [1] connect essential connect consult exercise ## Levels: connect exercise consult hobby essential See you in zoom on Monday! "],
["two.html", "Week 2 The data frame 2.1 Day 8 (Monday) Zoom check-in 2.2 Day 9: Creation and manipulation 2.3 Day 10: subset(), with(), and within() 2.4 Day 11: aggregate() and an initial work flow 2.5 Day 12 (Friday) Zoom check-in 2.6 Day 13: 2.7 Day 14", " Week 2 The data frame 2.1 Day 8 (Monday) Zoom check-in 2.2 Day 9: Creation and manipulation Creation Last week we created vectors summarizing our quarantine activities activity &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;walk&quot;) minutes &lt;- c(20, 30, 60, 60, 60) is_work &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE) levels &lt;- c(&quot;connect&quot;, &quot;exercise&quot;, &quot;consult&quot;, &quot;hobby&quot;, &quot;essential&quot;) classification &lt;- factor( c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;exercise&quot;), levels = levels ) dates &lt;- rep(&quot;04-14-2020&quot;, length(activity)) date &lt;- as.Date(dates, format = &quot;%m-%d-%Y&quot;) Each of these vectors is the same length, and are related to one another in a specific way – the first element of activity, ‘check e-mail’, is related to the first element of minutes, ‘20’, and to is_work, etc. Use data.frame() to construct an object containing each of these vectors Each argument to data.frame() is a vector representing a column The stringsAsFactors = FALSE argument says that character vectors should NOT be automatically coerced to factors activities &lt;- data.frame( activity, minutes, is_work, classification, date, stringsAsFactors = FALSE ) activities ## activity minutes is_work classification date ## 1 check e-mail 20 TRUE connect 2020-04-14 ## 2 breakfast 30 FALSE essential 2020-04-14 ## 3 conference call 60 TRUE connect 2020-04-14 ## 4 webinar 60 TRUE consult 2020-04-14 ## 5 walk 60 FALSE exercise 2020-04-14 We can query the object we’ve created for its class(), dim()ensions, take a look at the head() or tail() of the object, etc. names() returns the column names. class(activities) ## [1] &quot;data.frame&quot; dim(activities) # number of rows and columns ## [1] 5 5 head(activities, 3) # first three rows ## activity minutes is_work classification date ## 1 check e-mail 20 TRUE connect 2020-04-14 ## 2 breakfast 30 FALSE essential 2020-04-14 ## 3 conference call 60 TRUE connect 2020-04-14 names(activities) ## [1] &quot;activity&quot; &quot;minutes&quot; &quot;is_work&quot; &quot;classification&quot; ## [5] &quot;date&quot; Column selection Use [ to select rows and columns activities is a two-dimensional object Subset the data to contain the first and third rows and the first and fourth columns activities[c(1, 3), c(1, 4)] ## activity classification ## 1 check e-mail connect ## 3 conference call connect Subset columns by name activities[c(1, 3), c(&quot;activity&quot;, &quot;is_work&quot;)] ## activity is_work ## 1 check e-mail TRUE ## 3 conference call TRUE Subset only by row or only by column by omiting the subscript index for that dimension activities[c(1, 3), ] # all columns for rows 1 and 3 ## activity minutes is_work classification date ## 1 check e-mail 20 TRUE connect 2020-04-14 ## 3 conference call 60 TRUE connect 2020-04-14 activities[, c(&quot;activity&quot;, &quot;minutes&quot;)] # all rows for columns 1 and 2 ## activity minutes ## 1 check e-mail 20 ## 2 breakfast 30 ## 3 conference call 60 ## 4 webinar 60 ## 5 walk 60 Be careful when selecting a single column! By default, R returns a vector activities[, &quot;classification&quot;] ## [1] connect essential connect consult exercise ## Levels: connect exercise consult hobby essential Use drop = FALSE to return a data.frame activities[, &quot;classification&quot;, drop = FALSE] ## classification ## 1 connect ## 2 essential ## 3 connect ## 4 consult ## 5 exercise Use $ or [[ to select a column Selection of individual columns as vectors is easy activities$classification ## [1] connect essential connect consult exercise ## Levels: connect exercise consult hobby essential An alternative, often used in scripts, is to use [[, which requires the name of a variable provided as a character vector activities[[&quot;classification&quot;]] ## [1] connect essential connect consult exercise ## Levels: connect exercise consult hobby essential colname &lt;- &quot;classification&quot; activities[[colname]] ## [1] connect essential connect consult exercise ## Levels: connect exercise consult hobby essential Column selection and subsetting are often combined, e.g., to create a data.frame of work-related activities, or work-related activities lasting 60 minutes or longer work_related_activities &lt;- activities[ activities$is_work == TRUE, ] work_related_activities ## activity minutes is_work classification date ## 1 check e-mail 20 TRUE connect 2020-04-14 ## 3 conference call 60 TRUE connect 2020-04-14 ## 4 webinar 60 TRUE consult 2020-04-14 row_idx &lt;- activities$is_work &amp; (activities$minutes &gt;= 60) activities[row_idx,] ## activity minutes is_work classification date ## 3 conference call 60 TRUE connect 2020-04-14 ## 4 webinar 60 TRUE consult 2020-04-14 Adding or updating columns Use $ or [ or [[ to add a new column, activities$is_long_work &lt;- activities$is_work &amp; (activities$minutes &gt;= 60) activities ## activity minutes is_work classification date is_long_work ## 1 check e-mail 20 TRUE connect 2020-04-14 FALSE ## 2 breakfast 30 FALSE essential 2020-04-14 FALSE ## 3 conference call 60 TRUE connect 2020-04-14 TRUE ## 4 webinar 60 TRUE consult 2020-04-14 TRUE ## 5 walk 60 FALSE exercise 2020-04-14 FALSE ## ...another way of doing the same thing activities[[&quot;is_long_work&quot;]] &lt;- activities$is_work &amp; (activities$minutes &gt;= 60) ## ...and another way activities[,&quot;is_long_work&quot;] &lt;- activities$is_work &amp; (activities$minutes &gt;= 60) Columns can be updated in the same way activities$activity &lt;- toupper(activities$activity) activities ## activity minutes is_work classification date is_long_work ## 1 CHECK E-MAIL 20 TRUE connect 2020-04-14 FALSE ## 2 BREAKFAST 30 FALSE essential 2020-04-14 FALSE ## 3 CONFERENCE CALL 60 TRUE connect 2020-04-14 TRUE ## 4 WEBINAR 60 TRUE consult 2020-04-14 TRUE ## 5 WALK 60 FALSE exercise 2020-04-14 FALSE Reading and writing Create a file path to store a ‘csv’ file. From day 7, the path could be temporary, chosen interactively, a relative path, or an absolute path ## could be any of these... ## ## interactive_file_path &lt;- file.choose(new = TRUE) ## getcwd() ## relative_file_path &lt;- &quot;my_activity.rds&quot; ## absolute_file_path_on_macOS &lt;- &quot;/Users/ma38727/my_activity.rda&quot; ## ## ... but we&#39;ll use temporary_file_path &lt;- tempfile(fileext = &quot;.csv&quot;) Use write.csv() to save the data.frame to disk as a plain text file in ‘csv’ (comma-separated value) format. The row.names = FALSE argument means that the row indexes are not saved to the file (row names are created when data is read in using read.csv()). write.csv(activities, temporary_file_path, row.names = FALSE) If you wish, use RStudio File -&gt; Open File to navigate to the location where you saved the file, and open it. You could also open the file in Excel or other spreadsheet. Conversely, you can take an Excel sheet and export it as a csv file for reading into R. Use read.csv() to import a plain text file formatted as csv imported_activities &lt;- read.csv(temporary_file_path, stringsAsFactors = FALSE) imported_activities ## activity minutes is_work classification date is_long_work ## 1 CHECK E-MAIL 20 TRUE connect 2020-04-14 FALSE ## 2 BREAKFAST 30 FALSE essential 2020-04-14 FALSE ## 3 CONFERENCE CALL 60 TRUE connect 2020-04-14 TRUE ## 4 WEBINAR 60 TRUE consult 2020-04-14 TRUE ## 5 WALK 60 FALSE exercise 2020-04-14 FALSE Note that some information has not survived the round-trip – the classification and date columns are plain character vectors. class(imported_activities$classification) ## [1] &quot;character&quot; class(imported_activities$date) ## [1] &quot;character&quot; Update these to be a factor() with specific levels, and a Date. ` levels &lt;- c(&quot;connect&quot;, &quot;exercise&quot;, &quot;consult&quot;, &quot;hobby&quot;, &quot;essential&quot;) imported_activities$classification &lt;- factor( imported_activities$classification, levels = levels ) imported_activities$date &lt;- as.Date(imported_activities$date, format = &quot;%Y-%m-%d&quot;) imported_activities ## activity minutes is_work classification date is_long_work ## 1 CHECK E-MAIL 20 TRUE connect 2020-04-14 FALSE ## 2 BREAKFAST 30 FALSE essential 2020-04-14 FALSE ## 3 CONFERENCE CALL 60 TRUE connect 2020-04-14 TRUE ## 4 WEBINAR 60 TRUE consult 2020-04-14 TRUE ## 5 WALK 60 FALSE exercise 2020-04-14 FALSE Reading from a remote file (!) Visit the New York Times csv file daily tally of COVID-19 cases in all US counties. Read the data into an R data.frame url &lt;- &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv&quot; us &lt;- read.csv(url, stringsAsFactors = FALSE) Explore the data class(us) ## [1] &quot;data.frame&quot; dim(us) ## [1] 61971 6 head(us) ## date county state fips cases deaths ## 1 2020-01-21 Snohomish Washington 53061 1 0 ## 2 2020-01-22 Snohomish Washington 53061 1 0 ## 3 2020-01-23 Snohomish Washington 53061 1 0 ## 4 2020-01-24 Cook Illinois 17031 1 0 ## 5 2020-01-24 Snohomish Washington 53061 1 0 ## 6 2020-01-25 Orange California 6059 1 0 Subset the data to only New York state or Erie county ny_state &lt;- us[us$state == &quot;New York&quot;,] dim(ny_state) ## [1] 1722 6 erie &lt;- us[(us$state == &quot;New York&quot;) &amp; (us$county == &quot;Erie&quot;), ] erie ## date county state fips cases deaths ## 2569 2020-03-15 Erie New York 36029 3 0 ## 3028 2020-03-16 Erie New York 36029 6 0 ## 3544 2020-03-17 Erie New York 36029 7 0 ## 4141 2020-03-18 Erie New York 36029 7 0 ## 4870 2020-03-19 Erie New York 36029 28 0 ## 5717 2020-03-20 Erie New York 36029 31 0 ## 6711 2020-03-21 Erie New York 36029 38 0 ## 7805 2020-03-22 Erie New York 36029 54 0 ## 9003 2020-03-23 Erie New York 36029 87 0 ## 10314 2020-03-24 Erie New York 36029 107 0 ## 11754 2020-03-25 Erie New York 36029 122 0 ## 13367 2020-03-26 Erie New York 36029 134 2 ## 15111 2020-03-27 Erie New York 36029 219 6 ## 16951 2020-03-28 Erie New York 36029 354 6 ## 18888 2020-03-29 Erie New York 36029 380 6 ## 20938 2020-03-30 Erie New York 36029 443 8 ## 23079 2020-03-31 Erie New York 36029 438 8 ## 25283 2020-04-01 Erie New York 36029 553 12 ## 27544 2020-04-02 Erie New York 36029 734 19 ## 29866 2020-04-03 Erie New York 36029 802 22 ## 32254 2020-04-04 Erie New York 36029 945 26 ## 34687 2020-04-05 Erie New York 36029 1059 27 ## 37160 2020-04-06 Erie New York 36029 1163 30 ## 39674 2020-04-07 Erie New York 36029 1163 36 ## 42227 2020-04-08 Erie New York 36029 1205 38 ## 44803 2020-04-09 Erie New York 36029 1362 46 ## 47417 2020-04-10 Erie New York 36029 1409 58 ## 50071 2020-04-11 Erie New York 36029 1472 62 ## 52744 2020-04-12 Erie New York 36029 1571 75 ## 55428 2020-04-13 Erie New York 36029 1624 86 ## 58128 2020-04-14 Erie New York 36029 1668 99 ## 60844 2020-04-15 Erie New York 36029 1751 110 2.3 Day 10: subset(), with(), and within() subset() subset()ing a data.frame Read the New York Times csv file summarizing COVID cases in the US. url &lt;- &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv&quot; us &lt;- read.csv(url, stringsAsFactors = FALSE) Create subsets, e.g., to include only New York state, or only Erie county ny_state &lt;- subset(us, state == &quot;New York&quot;) dim(ny_state) ## [1] 1722 6 tail(ny_state) ## date county state fips cases deaths ## 60883 2020-04-15 Warren New York 36113 77 4 ## 60884 2020-04-15 Washington New York 36115 42 0 ## 60885 2020-04-15 Wayne New York 36117 48 0 ## 60886 2020-04-15 Westchester New York 36119 20947 708 ## 60887 2020-04-15 Wyoming New York 36121 34 3 ## 60888 2020-04-15 Yates New York 36123 6 0 erie &lt;- subset(us, (state == &quot;New York&quot;) &amp; county == &quot;Erie&quot;) dim(erie) ## [1] 32 6 tail(erie) ## date county state fips cases deaths ## 47417 2020-04-10 Erie New York 36029 1409 58 ## 50071 2020-04-11 Erie New York 36029 1472 62 ## 52744 2020-04-12 Erie New York 36029 1571 75 ## 55428 2020-04-13 Erie New York 36029 1624 86 ## 58128 2020-04-14 Erie New York 36029 1668 99 ## 60844 2020-04-15 Erie New York 36029 1751 110 with() Use with() to simply column references Goal: calculate maximum number of cases in the Erie county data subset First argument: a data.frame containing data to be manipulated – erie Second argument: an expression to be evaluated, usually referencing columns in the data set – max(cases) E.g., Calculate the maximum number of cases in the erie subset with(erie, max(cases)) ## [1] 1751 Second argument can be more complicated, using {} to enclose several lines. E.g., Calculate the number of new cases, and then reports the average number of new cases per day. We will use diff() diff() calculates the difference between successive values of a vector x &lt;- c(1, 1, 2, 3, 5, 8) diff(x) ## [1] 0 1 1 2 3 The length of diff(x) is one less than the length of x length(x) ## [1] 6 length(diff(x)) ## [1] 5 The initial value of x is sometimes implicit, e.g., prior to the first observation in the COVID data sets there were 0 cases reported. c()oncatenate a leading 0 to x to include the implicit initial value diff(c(0, x)) ## [1] 1 0 1 1 2 3 new_cases is the diff() of successive values of cases, with the initial value implicitly 0. with(erie, { new_cases &lt;- diff(c(0, cases)) mean(new_cases) }) ## [1] 54.71875 within() Adding and updating columns within() a data.frame First argument: a data.frame containing data to be updated – erie Second argument: an expression of one or more variable assignments, the assignments create new columns in the data.frame. Example: add a new_cases column erie_new_cases &lt;- within(erie, { new_cases &lt;- diff(c(0, cases)) }) head(erie_new_cases) ## date county state fips cases deaths new_cases ## 2569 2020-03-15 Erie New York 36029 3 0 3 ## 3028 2020-03-16 Erie New York 36029 6 0 3 ## 3544 2020-03-17 Erie New York 36029 7 0 1 ## 4141 2020-03-18 Erie New York 36029 7 0 0 ## 4870 2020-03-19 Erie New York 36029 28 0 21 ## 5717 2020-03-20 Erie New York 36029 31 0 3 2.4 Day 11: aggregate() and an initial work flow aggregate() for summarizing columns by group Goal: summarize maximum number of cases by county in New York state Setup Read and subset the New York Times data to contain only New York state data url &lt;- &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv&quot; us &lt;- read.csv(url, stringsAsFactors = FALSE) ny_state &lt;- subset(us, state == &quot;New York&quot;) aggregate() First argument: a formula – cases ~ county Right-hand side: the variable to be used to subset (group) the data – county Left-hand side: the variable to be used in the aggregation function – cases Second argument: source of data – ny_state Third argument: the function to be applied to each subset of data – max Maximum number of cases by county: max_cases_by_county &lt;- aggregate( cases ~ county, ny_state, max ) Exploring the data summary Subset to some interesting ‘counties’ head(max_cases_by_county) ## county cases ## 1 Albany 548 ## 2 Allegany 28 ## 3 Broome 153 ## 4 Cattaraugus 32 ## 5 Cayuga 36 ## 6 Chautauqua 24 subset( max_cases_by_county, county %in% c(&quot;New York City&quot;, &quot;Westchester&quot;, &quot;Erie&quot;) ) ## county cases ## 14 Erie 1751 ## 29 New York City 118302 ## 57 Westchester 20947 Help: ?aggregate.formula An initial work flow Data input url &lt;- &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv&quot; us &lt;- read.csv(url, stringsAsFactors = FALSE) class(us) ## [1] &quot;data.frame&quot; dim(us) ## [1] 61971 6 head(us) ## date county state fips cases deaths ## 1 2020-01-21 Snohomish Washington 53061 1 0 ## 2 2020-01-22 Snohomish Washington 53061 1 0 ## 3 2020-01-23 Snohomish Washington 53061 1 0 ## 4 2020-01-24 Cook Illinois 17031 1 0 ## 5 2020-01-24 Snohomish Washington 53061 1 0 ## 6 2020-01-25 Orange California 6059 1 0 Cleaning date is a plain-old character vector, but should be a Date. class(us$date) # oops, should be &#39;Date&#39; ## [1] &quot;character&quot; Update, method 1 us$date &lt;- as.Date(us$date, format = &quot;%Y-%m-%d&quot;) head(us) ## date county state fips cases deaths ## 1 2020-01-21 Snohomish Washington 53061 1 0 ## 2 2020-01-22 Snohomish Washington 53061 1 0 ## 3 2020-01-23 Snohomish Washington 53061 1 0 ## 4 2020-01-24 Cook Illinois 17031 1 0 ## 5 2020-01-24 Snohomish Washington 53061 1 0 ## 6 2020-01-25 Orange California 6059 1 0 Update, method 2 us &lt;- within(us, { date = as.Date(date, format = &quot;%Y-%m-%d&quot;) }) head(us) ## date county state fips cases deaths ## 1 2020-01-21 Snohomish Washington 53061 1 0 ## 2 2020-01-22 Snohomish Washington 53061 1 0 ## 3 2020-01-23 Snohomish Washington 53061 1 0 ## 4 2020-01-24 Cook Illinois 17031 1 0 ## 5 2020-01-24 Snohomish Washington 53061 1 0 ## 6 2020-01-25 Orange California 6059 1 0 Interested only in Erie county, New York state Subset, method 1 row_idx &lt;- (us$county == &quot;Erie&quot;) &amp; (us$state == &quot;New York&quot;) erie &lt;- us[row_idx,] dim(erie) ## [1] 32 6 Subset, method 2 erie &lt;- subset(us, (county == &quot;Erie&quot;) &amp; (state == &quot;New York&quot;)) dim(erie) ## [1] 32 6 Manipulation Goal: calculate new_cases as the difference between succesive days, using diff() Remember use of diff() ## example: `diff()` between successive numbers in a vector x &lt;- c(1, 1, 2, 3, 5, 7) diff(x) ## [1] 0 1 1 2 2 ## note &#39;diff()&#39; what about the implicit &#39;0&#39; at the start of a sequence? diff( c(0, x) ) ## [1] 1 0 1 1 2 2 Update, methods 1 &amp; 2 ## one way... erie$new_cases &lt;- diff( c(0, erie$cases) ) ## ...or another erie &lt;- within(erie, { new_cases &lt;- diff( c(0, cases) ) }) Simple visualization Use a formula to describe the dependent (y-axis) variable as a function of the independent (x-axis) variable – cases ~ date plot( cases ~ date, erie) maybe more informative: log-transformed new cases plot( new_cases ~ date, erie, log = &quot;y&quot;, main = &quot;New Cases, Erie County&quot; ) ## Warning in xy.coords(x, y, xlabel, ylabel, log): 3 y values &lt;= 0 omitted from ## logarithmic plot Help: ?plot.formula Summary: calculate maximum (total) number of cases per county in New York state For Erie county, let’s see how to calculate the maximum (total) number of cases max(erie$cases) # one way... ## [1] 1751 with(erie, max(cases)) # ... another ## [1] 1751 Subset US data to New York state ny_state &lt;- subset(us, state == &quot;New York&quot;) Summarize each county in the state using aggregate(). First argument: summarize cases grouped by county – cases ~ county Second argument: data source – ny_state Third argument: function to apply to each subset – max max_cases_by_county &lt;- aggregate( cases ~ county, ny_state, max) head(max_cases_by_county) ## county cases ## 1 Albany 548 ## 2 Allegany 28 ## 3 Broome 153 ## 4 Cattaraugus 32 ## 5 Cayuga 36 ## 6 Chautauqua 24 subset() to select counties subset( max_cases_by_county, county %in% c(&quot;New York City&quot;, &quot;Westchester&quot;, &quot;Erie&quot;) ) ## county cases ## 14 Erie 1751 ## 29 New York City 118302 ## 57 Westchester 20947 Summary: calculate maximum (total) number of cases per state Use entire data set, us aggregate() cases by county and state – cases ~ county + state max_cases_by_county_state &lt;- aggregate( cases ~ county + state, us, max ) dim(max_cases_by_county_state) ## [1] 2753 3 head(max_cases_by_county_state) ## county state cases ## 1 Autauga Alabama 25 ## 2 Baldwin Alabama 98 ## 3 Barbour Alabama 13 ## 4 Bibb Alabama 19 ## 5 Blount Alabama 17 ## 6 Bullock Alabama 8 aggregate() a second time, using max_cases_by_county_state and aggregtaing by state max_cases_by_state &lt;- aggregate( cases ~ state, max_cases_by_county_state, max ) Explore the data head(max_cases_by_state) ## state cases ## 1 Alabama 628 ## 2 Alaska 139 ## 3 Arizona 2146 ## 4 Arkansas 353 ## 5 California 10496 ## 6 Colorado 1468 subset( max_cases_by_state, state %in% c(&quot;California&quot;, &quot;Illinois&quot;, &quot;New York&quot;, &quot;Washington&quot;) ) ## state cases ## 5 California 10496 ## 15 Illinois 17306 ## 34 New York 118302 ## 52 Washington 4699 2.5 Day 12 (Friday) Zoom check-in 2.6 Day 13: 2.7 Day 14 Self-directed activities. "],
["three.html", "Week 3 Packages and the ‘tidyverse’ 3.1 Day 15 (Monday) Zoom check-in 3.2 CRAN 3.3 The ‘tidyverse’ of packages 3.4 Day 16 3.5 Day 17 3.6 Day 18 3.7 Day 19 (Friday) Zoom check-in 3.8 Day 20 3.9 Day 21", " Week 3 Packages and the ‘tidyverse’ 3.1 Day 15 (Monday) Zoom check-in 3.2 CRAN 3.3 The ‘tidyverse’ of packages 3.4 Day 16 3.5 Day 17 3.6 Day 18 3.7 Day 19 (Friday) Zoom check-in 3.7.1 Review and trouble shoot (25 minutes) 3.7.2 Next week (25 minutes) 3.8 Day 20 3.9 Day 21 Self-directed activities. "],
["four.html", "Week 4 Maps and spatial statistics 4.1 Day 22 (Monday) Zoom check-in 4.2 Day 23 4.3 Day 24 4.4 Day 25 4.5 Day 26 (Friday) Zoom check-in 4.6 Day 27 4.7 Day 28", " Week 4 Maps and spatial statistics 4.1 Day 22 (Monday) Zoom check-in 4.2 Day 23 4.3 Day 24 4.4 Day 25 4.5 Day 26 (Friday) Zoom check-in 4.5.1 Review and trouble shoot (25 minutes) 4.5.2 Next week (25 minutes) 4.6 Day 27 4.7 Day 28 Self-directed activities. "],
["five.html", "Week 5 Bioinformatics with Bioconductor 5.1 Day 29 (Monday) Zoom check-in 5.2 Day 30 5.3 Day 31 5.4 Day 32 5.5 Day 33 (Friday) Zoom check-in 5.6 Day 34 5.7 Day 35", " Week 5 Bioinformatics with Bioconductor 5.1 Day 29 (Monday) Zoom check-in 5.2 Day 30 5.3 Day 31 5.4 Day 32 5.5 Day 33 (Friday) Zoom check-in 5.5.1 Review and trouble shoot (25 minutes) 5.5.2 Next week (25 minutes) 5.6 Day 34 5.7 Day 35 Self-directed activities. "],
["six.html", "Week 6 Collaboration 6.1 5 Days (Monday) Zoom check-in 6.2 4 Days 6.3 3 Days 6.4 2 Days 6.5 Today! (Friday) Zoom check-in", " Week 6 Collaboration 6.1 5 Days (Monday) Zoom check-in 6.2 4 Days 6.3 3 Days 6.4 2 Days 6.5 Today! (Friday) Zoom check-in Course review and next steps "],
["frequently-asked-questions.html", "Frequently asked questions", " Frequently asked questions Is the course material available in PDF? Yes, click the ‘Download’ icon and PDF format in the title bar of the main document, as illustrated in the figure. Remember that the course material is a ‘work in progress’, so the PDF will need to be updated frequently throughout the course. Also, the book is not pretty; that’s a task for a separate quarantine! Whenever I press the ‘enter’ key, the RStudio console keeps saying + and doesn’t evaluate my expression! See the figure below. Notice that you’ve started a character string with a double &quot;, and tried to terminate it with a single quote '. Because the quotes do not match, R thinks you’re still trying to complete the entry of the variable, and it’s letting you know that it is expecting more with the + prompt at the begining of the line. A common variant of this is to open more parentheses than you close, as shown in The solution is either to complete your entry (by entering a &quot; or balancing the parentheses with )) or abandon your attempt by pressing control-C or the escape key (usually in the top left corner of the keyboard) "]
]
