[
["two.html", "Week 2 The data frame 2.1 Day 8 (Monday) Zoom check-in 2.2 Day 9: Creation and manipulation 2.3 Day 10: subset(), with(), and within() 2.4 Day 11: aggregate() and an initial work flow 2.5 Day 12 (Friday) Zoom check-in 2.6 Day 13: 2.7 Day 14", " Week 2 The data frame 2.1 Day 8 (Monday) Zoom check-in Review and troubleshoot (15 minutes) The data frame (40 minutes) Concept Recall from Day 1: Data frames are handy containers for experimental data. Like a spreadsheet, a data frame has rows and columns The columns of a data frame contain data fields. Each field could refer to a different type of object (numeric, string, etc.) height, weight, age, etc. activity, duration, is work?, level, date, etc. The rows of a data frame contain tuples of data Note: you must ensure units are consistent across tuples! Rows and columns can be assigned names. Create a simple data frame heights &lt;- c(72, 65, 68) weights &lt;- c(190, 130, 150) ages &lt;- c(44, 35, 37) df &lt;- data.frame(heights, weights, ages) df ## heights weights ages ## 1 72 190 44 ## 2 65 130 35 ## 3 68 150 37 Create a data frame with row and column names named_df &lt;- data.frame(heights, weights, ages) colnames(named_df) &lt;- c(&quot;hgt_inches&quot;, &quot;wgt_lbs&quot;, &quot;age_years&quot;) rownames(named_df) &lt;- c(&quot;John Doe&quot;, &quot;Pat Jones&quot;, &quot;Sara Grant&quot;) named_df ## hgt_inches wgt_lbs age_years ## John Doe 72 190 44 ## Pat Jones 65 130 35 ## Sara Grant 68 150 37 2.1.0.1 Add a row/tuple For now, use rbind(). Later you’ll learn about the more intuitive add_row() functionality of the tidyverse pacakge. more_heights &lt;- c(61, 68, 70) more_weights &lt;- c(101, 134, 175) more_ages &lt;- c(13, 16, 24) df_more &lt;- data.frame(more_heights, more_weights, more_ages) colnames(df_more) &lt;- c(&quot;hgt_inches&quot;, &quot;wgt_lbs&quot;, &quot;age_years&quot;) rownames(df_more) &lt;- c(&quot;Bob Kane&quot;, &quot;Kari Patra&quot;, &quot;Sam Groe&quot;) named_df &lt;- rbind(named_df, df_more) named_df ## hgt_inches wgt_lbs age_years ## John Doe 72 190 44 ## Pat Jones 65 130 35 ## Sara Grant 68 150 37 ## Bob Kane 61 101 13 ## Kari Patra 68 134 16 ## Sam Groe 70 175 24 2.1.0.2 Delete a row/tuple Row deletion using row names is a little tricky …. # suppose the study has some dropouts .... dropouts = c(&quot;Bob Kane&quot;, &quot;John Doe&quot;) named_df &lt;- named_df[! rownames(named_df) %in% dropouts, ] named_df ## hgt_inches wgt_lbs age_years ## Pat Jones 65 130 35 ## Sara Grant 68 150 37 ## Kari Patra 68 134 16 ## Sam Groe 70 175 24 Row deletion using row indices is more straightforawrd. Just use negative subsetting …. # suppose the study has some dropouts .... dropouts = c(2,3) df # referesh my memory about df contents .... ## heights weights ages ## 1 72 190 44 ## 2 65 130 35 ## 3 68 150 37 df &lt;- df[-dropouts, ] df # items 2 and 3 are dropped! ## heights weights ages ## 1 72 190 44 2.1.0.3 Some useful data frame operations Try these out on your simple data frames df and named_df: str(df) # structure (NOT string!)(sorry Python programmers ;) dim(df) # dimensions View(df) # open tabular view of data frame head(df) # first few rows tail(df) # last few rows names(df) # column names colnames(df) # column names rownames(df) # row names Creation Data from the second day of quarantine activity &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;walk&quot;) minutes &lt;- c(20, 30, 60, 60, 60) is_work &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE) levels &lt;- c(&quot;connect&quot;, &quot;exercise&quot;, &quot;consult&quot;, &quot;hobby&quot;, &quot;essential&quot;) classification &lt;- factor( c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;exercise&quot;), levels = levels ) dates &lt;- rep(&quot;04-14-2020&quot;, length(activity)) date &lt;- as.Date(dates, format = &quot;%m-%d-%Y&quot;) Represent as a data.frame() activities &lt;- data.frame(activity, minutes, is_work, classification, date) activities ## activity minutes is_work classification date ## 1 check e-mail 20 TRUE connect 2020-04-14 ## 2 breakfast 30 FALSE essential 2020-04-14 ## 3 conference call 60 TRUE connect 2020-04-14 ## 4 webinar 60 TRUE consult 2020-04-14 ## 5 walk 60 FALSE exercise 2020-04-14 Interogate for some basic properties, including dim()ensions (number of rows and columns) class(activities) ## [1] &quot;data.frame&quot; dim(activities) ## [1] 5 5 Column access $ [[ Updating or adding columns Subsetting with [ Subsetting rows Subsetting columns Subsetting rows and columns Subsetting based on column values example row_idx &lt;- activities$minutes &gt;= 60 activities[row_idx,] ## activity minutes is_work classification date ## 3 conference call 60 TRUE connect 2020-04-14 ## 4 webinar 60 TRUE consult 2020-04-14 ## 5 walk 60 FALSE exercise 2020-04-14 ## same as, but more readable than, ... activities[activities$minutes &gt;= 60,] ## activity minutes is_work classification date ## 3 conference call 60 TRUE connect 2020-04-14 ## 4 webinar 60 TRUE consult 2020-04-14 ## 5 walk 60 FALSE exercise 2020-04-14 Binding rows (and columns) Activities, day 1 ## &#39;classification&#39; factor levels levels &lt;- c(&quot;connect&quot;, &quot;exercise&quot;, &quot;consult&quot;, &quot;hobby&quot;, &quot;essential&quot;) ## Quarantine log, day 1 activity_day_1 &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;walk&quot;) minutes_day_1 &lt;- c(20, 30, 60, 60, 60) is_work_day_1 &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE) classification_day_1 &lt;- factor( c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;exercise&quot;), levels = levels ) date_day_1 &lt;- as.Date(rep(&quot;04-14-2020&quot;, length(activity_day_1)), &quot;%m-%d-%Y&quot;) day1 &lt;- data.frame( activity = activity_day_1, minutes = minutes_day_1, is_work = is_work_day_1, classification = classification_day_1, date = date_day_1 ) Activities, day 2 activity_day_2 &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;read a book&quot;) minutes_day_2 &lt;- c(20, 30, 60, 60, 60) is_work_day_2 &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE) classification_day_2 &lt;- factor( c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;hobby&quot;), levels = levels ) date_day_2 &lt;- as.Date(rep(&quot;04-15-2020&quot;, length(activity_day_2)), &quot;%m-%d-%Y&quot;) day2 &lt;- data.frame( activity = activity_day_2, minutes = minutes_day_2, is_work = is_work_day_2, classification = classification_day_2, date = date_day_2 ) Activities, both days quarantine_log &lt;- rbind(day1, day2) quarantine_log ## activity minutes is_work classification date ## 1 check e-mail 20 TRUE connect 2020-04-14 ## 2 breakfast 30 FALSE essential 2020-04-14 ## 3 conference call 60 TRUE connect 2020-04-14 ## 4 webinar 60 TRUE consult 2020-04-14 ## 5 walk 60 FALSE exercise 2020-04-14 ## 6 check e-mail 20 TRUE connect 2020-04-15 ## 7 breakfast 30 FALSE essential 2020-04-15 ## 8 conference call 60 TRUE connect 2020-04-15 ## 9 webinar 60 TRUE consult 2020-04-15 ## 10 read a book 60 FALSE hobby 2020-04-15 Writing and reading Exmaple: round-trip file &lt;- tempfile() # temporary file ## file &lt;- file.choose() ## file &lt;- &quot;activities.csv&quot; ## file &lt;- &quot;/Users/ma38737/MyQuarantine/activities.csv&quot; write.csv(quarantine_log, file, row.names = FALSE) read.csv(file) ## activity minutes is_work classification date ## 1 check e-mail 20 TRUE connect 2020-04-14 ## 2 breakfast 30 FALSE essential 2020-04-14 ## 3 conference call 60 TRUE connect 2020-04-14 ## 4 webinar 60 TRUE consult 2020-04-14 ## 5 walk 60 FALSE exercise 2020-04-14 ## 6 check e-mail 20 TRUE connect 2020-04-15 ## 7 breakfast 30 FALSE essential 2020-04-15 ## 8 conference call 60 TRUE connect 2020-04-15 ## 9 webinar 60 TRUE consult 2020-04-15 ## 10 read a book 60 FALSE hobby 2020-04-15 R and spreadsheets An alternative way of working with data.frame() with(): column selection and computation within(): update or add columns subset(): row and column subset Summarization Use with() to simplify variable reference Create a new data.frame() containing the summary with(quarantine_log, { data.frame( days_in_quarantine = length(unique(date)), total_minutes = sum(minutes), work_activities = sum(is_work), other_activities = sum(!is_work) ) }) ## days_in_quarantine total_minutes work_activities other_activities ## 1 2 460 6 4 Summarization by group aggregate() ## minutes per day spent on each activity, from the quarantine_log aggregate(minutes ~ activity, quarantine_log, sum) ## activity minutes ## 1 breakfast 60 ## 2 check e-mail 40 ## 3 conference call 120 ## 4 walk 60 ## 5 webinar 120 ## 6 read a book 60 ## minutes per day spent on each clasasification aggregate(minutes ~ classification, quarantine_log, sum) ## classification minutes ## 1 connect 160 ## 2 exercise 60 ## 3 consult 120 ## 4 hobby 60 ## 5 essential 60 ## non-work activities per day aggregate(!is_work ~ date, quarantine_log, sum) ## date !is_work ## 1 2020-04-14 2 ## 2 2020-04-15 2 2.1.1 This week’s activities (5 minutes) Goal: retrieve and summarize COVID 19 cases in Erie county and nationally 2.2 Day 9: Creation and manipulation Creation Last week we created vectors summarizing our quarantine activities activity &lt;- c(&quot;check e-mail&quot;, &quot;breakfast&quot;, &quot;conference call&quot;, &quot;webinar&quot;, &quot;walk&quot;) minutes &lt;- c(20, 30, 60, 60, 60) is_work &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE) levels &lt;- c(&quot;connect&quot;, &quot;exercise&quot;, &quot;consult&quot;, &quot;hobby&quot;, &quot;essential&quot;) classification &lt;- factor( c(&quot;connect&quot;, &quot;essential&quot;, &quot;connect&quot;, &quot;consult&quot;, &quot;exercise&quot;), levels = levels ) dates &lt;- rep(&quot;04-14-2020&quot;, length(activity)) date &lt;- as.Date(dates, format = &quot;%m-%d-%Y&quot;) Each of these vectors is the same length, and are related to one another in a specific way – the first element of activity, ‘check e-mail’, is related to the first element of minutes, ‘20’, and to is_work, etc. Use data.frame() to construct an object containing each of these vectors Each argument to data.frame() is a vector representing a column The stringsAsFactors = FALSE argument says that character vectors should NOT be automatically coerced to factors activities &lt;- data.frame( activity, minutes, is_work, classification, date, stringsAsFactors = FALSE ) activities ## activity minutes is_work classification date ## 1 check e-mail 20 TRUE connect 2020-04-14 ## 2 breakfast 30 FALSE essential 2020-04-14 ## 3 conference call 60 TRUE connect 2020-04-14 ## 4 webinar 60 TRUE consult 2020-04-14 ## 5 walk 60 FALSE exercise 2020-04-14 We can query the object we’ve created for its class(), dim()ensions, take a look at the head() or tail() of the object, etc. names() returns the column names. class(activities) ## [1] &quot;data.frame&quot; dim(activities) # number of rows and columns ## [1] 5 5 head(activities, 3) # first three rows ## activity minutes is_work classification date ## 1 check e-mail 20 TRUE connect 2020-04-14 ## 2 breakfast 30 FALSE essential 2020-04-14 ## 3 conference call 60 TRUE connect 2020-04-14 names(activities) ## [1] &quot;activity&quot; &quot;minutes&quot; &quot;is_work&quot; &quot;classification&quot; ## [5] &quot;date&quot; Column selection Use [ to select rows and columns activities is a two-dimensional object Subset the data to contain the first and third rows and the first and fourth columns activities[c(1, 3), c(1, 4)] ## activity classification ## 1 check e-mail connect ## 3 conference call connect Subset columns by name activities[c(1, 3), c(&quot;activity&quot;, &quot;is_work&quot;)] ## activity is_work ## 1 check e-mail TRUE ## 3 conference call TRUE Subset only by row or only by column by omiting the subscript index for that dimension activities[c(1, 3), ] # all columns for rows 1 and 3 ## activity minutes is_work classification date ## 1 check e-mail 20 TRUE connect 2020-04-14 ## 3 conference call 60 TRUE connect 2020-04-14 activities[, c(&quot;activity&quot;, &quot;minutes&quot;)] # all rows for columns 1 and 2 ## activity minutes ## 1 check e-mail 20 ## 2 breakfast 30 ## 3 conference call 60 ## 4 webinar 60 ## 5 walk 60 Be careful when selecting a single column! By default, R returns a vector activities[, &quot;classification&quot;] ## [1] connect essential connect consult exercise ## Levels: connect exercise consult hobby essential Use drop = FALSE to return a data.frame activities[, &quot;classification&quot;, drop = FALSE] ## classification ## 1 connect ## 2 essential ## 3 connect ## 4 consult ## 5 exercise Use $ or [[ to select a column Selection of individual columns as vectors is easy activities$classification ## [1] connect essential connect consult exercise ## Levels: connect exercise consult hobby essential An alternative, often used in scripts, is to use [[, which requires the name of a variable provided as a character vector activities[[&quot;classification&quot;]] ## [1] connect essential connect consult exercise ## Levels: connect exercise consult hobby essential colname &lt;- &quot;classification&quot; activities[[colname]] ## [1] connect essential connect consult exercise ## Levels: connect exercise consult hobby essential Column selection and subsetting are often combined, e.g., to create a data.frame of work-related activities, or work-related activities lasting 60 minutes or longer work_related_activities &lt;- activities[ activities$is_work == TRUE, ] work_related_activities ## activity minutes is_work classification date ## 1 check e-mail 20 TRUE connect 2020-04-14 ## 3 conference call 60 TRUE connect 2020-04-14 ## 4 webinar 60 TRUE consult 2020-04-14 row_idx &lt;- activities$is_work &amp; (activities$minutes &gt;= 60) activities[row_idx,] ## activity minutes is_work classification date ## 3 conference call 60 TRUE connect 2020-04-14 ## 4 webinar 60 TRUE consult 2020-04-14 Adding or updating columns Use $ or [ or [[ to add a new column, activities$is_long_work &lt;- activities$is_work &amp; (activities$minutes &gt;= 60) activities ## activity minutes is_work classification date is_long_work ## 1 check e-mail 20 TRUE connect 2020-04-14 FALSE ## 2 breakfast 30 FALSE essential 2020-04-14 FALSE ## 3 conference call 60 TRUE connect 2020-04-14 TRUE ## 4 webinar 60 TRUE consult 2020-04-14 TRUE ## 5 walk 60 FALSE exercise 2020-04-14 FALSE ## ...another way of doing the same thing activities[[&quot;is_long_work&quot;]] &lt;- activities$is_work &amp; (activities$minutes &gt;= 60) ## ...and another way activities[,&quot;is_long_work&quot;] &lt;- activities$is_work &amp; (activities$minutes &gt;= 60) Columns can be updated in the same way activities$activity &lt;- toupper(activities$activity) activities ## activity minutes is_work classification date is_long_work ## 1 CHECK E-MAIL 20 TRUE connect 2020-04-14 FALSE ## 2 BREAKFAST 30 FALSE essential 2020-04-14 FALSE ## 3 CONFERENCE CALL 60 TRUE connect 2020-04-14 TRUE ## 4 WEBINAR 60 TRUE consult 2020-04-14 TRUE ## 5 WALK 60 FALSE exercise 2020-04-14 FALSE Reading and writing Create a file path to store a ‘csv’ file. From day 7, the path could be temporary, chosen interactively, a relative path, or an absolute path ## could be any of these... ## ## interactive_file_path &lt;- file.choose(new = TRUE) ## getcwd() ## relative_file_path &lt;- &quot;my_activity.rds&quot; ## absolute_file_path_on_macOS &lt;- &quot;/Users/ma38727/my_activity.rda&quot; ## ## ... but we&#39;ll use temporary_file_path &lt;- tempfile(fileext = &quot;.csv&quot;) Use write.csv() to save the data.frame to disk as a plain text file in ‘csv’ (comma-separated value) format. The row.names = FALSE argument means that the row indexes are not saved to the file (row names are created when data is read in using read.csv()). write.csv(activities, temporary_file_path, row.names = FALSE) If you wish, use RStudio File -&gt; Open File to navigate to the location where you saved the file, and open it. You could also open the file in Excel or other spreadsheet. Conversely, you can take an Excel sheet and export it as a csv file for reading into R. Use read.csv() to import a plain text file formatted as csv imported_activities &lt;- read.csv(temporary_file_path, stringsAsFactors = FALSE) imported_activities ## activity minutes is_work classification date is_long_work ## 1 CHECK E-MAIL 20 TRUE connect 2020-04-14 FALSE ## 2 BREAKFAST 30 FALSE essential 2020-04-14 FALSE ## 3 CONFERENCE CALL 60 TRUE connect 2020-04-14 TRUE ## 4 WEBINAR 60 TRUE consult 2020-04-14 TRUE ## 5 WALK 60 FALSE exercise 2020-04-14 FALSE Note that some information has not survived the round-trip – the classification and date columns are plain character vectors. class(imported_activities$classification) ## [1] &quot;character&quot; class(imported_activities$date) ## [1] &quot;character&quot; Update these to be a factor() with specific levels, and a Date. ` levels &lt;- c(&quot;connect&quot;, &quot;exercise&quot;, &quot;consult&quot;, &quot;hobby&quot;, &quot;essential&quot;) imported_activities$classification &lt;- factor( imported_activities$classification, levels = levels ) imported_activities$date &lt;- as.Date(imported_activities$date, format = &quot;%Y-%m-%d&quot;) imported_activities ## activity minutes is_work classification date is_long_work ## 1 CHECK E-MAIL 20 TRUE connect 2020-04-14 FALSE ## 2 BREAKFAST 30 FALSE essential 2020-04-14 FALSE ## 3 CONFERENCE CALL 60 TRUE connect 2020-04-14 TRUE ## 4 WEBINAR 60 TRUE consult 2020-04-14 TRUE ## 5 WALK 60 FALSE exercise 2020-04-14 FALSE Reading from a remote file (!) Visit the New York Times csv file daily tally of COVID-19 cases in all US counties. Read the data into an R data.frame url &lt;- &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv&quot; us &lt;- read.csv(url, stringsAsFactors = FALSE) Explore the data class(us) ## [1] &quot;data.frame&quot; dim(us) ## [1] 64707 6 head(us) ## date county state fips cases deaths ## 1 2020-01-21 Snohomish Washington 53061 1 0 ## 2 2020-01-22 Snohomish Washington 53061 1 0 ## 3 2020-01-23 Snohomish Washington 53061 1 0 ## 4 2020-01-24 Cook Illinois 17031 1 0 ## 5 2020-01-24 Snohomish Washington 53061 1 0 ## 6 2020-01-25 Orange California 6059 1 0 Subset the data to only New York state or Erie county ny_state &lt;- us[us$state == &quot;New York&quot;,] dim(ny_state) ## [1] 1780 6 erie &lt;- us[(us$state == &quot;New York&quot;) &amp; (us$county == &quot;Erie&quot;), ] erie ## date county state fips cases deaths ## 2569 2020-03-15 Erie New York 36029 3 0 ## 3028 2020-03-16 Erie New York 36029 6 0 ## 3544 2020-03-17 Erie New York 36029 7 0 ## 4141 2020-03-18 Erie New York 36029 7 0 ## 4870 2020-03-19 Erie New York 36029 28 0 ## 5717 2020-03-20 Erie New York 36029 31 0 ## 6711 2020-03-21 Erie New York 36029 38 0 ## 7805 2020-03-22 Erie New York 36029 54 0 ## 9003 2020-03-23 Erie New York 36029 87 0 ## 10314 2020-03-24 Erie New York 36029 107 0 ## 11754 2020-03-25 Erie New York 36029 122 0 ## 13367 2020-03-26 Erie New York 36029 134 2 ## 15111 2020-03-27 Erie New York 36029 219 6 ## 16951 2020-03-28 Erie New York 36029 354 6 ## 18888 2020-03-29 Erie New York 36029 380 6 ## 20938 2020-03-30 Erie New York 36029 443 8 ## 23079 2020-03-31 Erie New York 36029 438 8 ## 25283 2020-04-01 Erie New York 36029 553 12 ## 27544 2020-04-02 Erie New York 36029 734 19 ## 29866 2020-04-03 Erie New York 36029 802 22 ## 32254 2020-04-04 Erie New York 36029 945 26 ## 34687 2020-04-05 Erie New York 36029 1059 27 ## 37160 2020-04-06 Erie New York 36029 1163 30 ## 39674 2020-04-07 Erie New York 36029 1163 36 ## 42227 2020-04-08 Erie New York 36029 1205 38 ## 44803 2020-04-09 Erie New York 36029 1362 46 ## 47417 2020-04-10 Erie New York 36029 1409 58 ## 50071 2020-04-11 Erie New York 36029 1472 62 ## 52744 2020-04-12 Erie New York 36029 1571 75 ## 55428 2020-04-13 Erie New York 36029 1624 86 ## 58128 2020-04-14 Erie New York 36029 1668 99 ## 60844 2020-04-15 Erie New York 36029 1751 110 ## 63572 2020-04-16 Erie New York 36029 1850 115 2.3 Day 10: subset(), with(), and within() subset() subset()ing a data.frame Read the New York Times csv file summarizing COVID cases in the US. url &lt;- &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv&quot; us &lt;- read.csv(url, stringsAsFactors = FALSE) Create subsets, e.g., to include only New York state, or only Erie county ny_state &lt;- subset(us, state == &quot;New York&quot;) dim(ny_state) ## [1] 1780 6 tail(ny_state) ## date county state fips cases deaths ## 63611 2020-04-16 Warren New York 36113 81 5 ## 63612 2020-04-16 Washington New York 36115 46 0 ## 63613 2020-04-16 Wayne New York 36117 49 0 ## 63614 2020-04-16 Westchester New York 36119 21828 738 ## 63615 2020-04-16 Wyoming New York 36121 34 3 ## 63616 2020-04-16 Yates New York 36123 7 0 erie &lt;- subset(us, (state == &quot;New York&quot;) &amp; county == &quot;Erie&quot;) dim(erie) ## [1] 33 6 tail(erie) ## date county state fips cases deaths ## 50071 2020-04-11 Erie New York 36029 1472 62 ## 52744 2020-04-12 Erie New York 36029 1571 75 ## 55428 2020-04-13 Erie New York 36029 1624 86 ## 58128 2020-04-14 Erie New York 36029 1668 99 ## 60844 2020-04-15 Erie New York 36029 1751 110 ## 63572 2020-04-16 Erie New York 36029 1850 115 with() Use with() to simply column references Goal: calculate maximum number of cases in the Erie county data subset First argument: a data.frame containing data to be manipulated – erie Second argument: an expression to be evaluated, usually referencing columns in the data set – max(cases) E.g., Calculate the maximum number of cases in the erie subset with(erie, max(cases)) ## [1] 1850 Second argument can be more complicated, using {} to enclose several lines. E.g., Calculate the number of new cases, and then reports the average number of new cases per day. We will use diff() diff() calculates the difference between successive values of a vector x &lt;- c(1, 1, 2, 3, 5, 8) diff(x) ## [1] 0 1 1 2 3 The length of diff(x) is one less than the length of x length(x) ## [1] 6 length(diff(x)) ## [1] 5 new_cases is the diff() of successive values of cases, with an implicit initial value equal to 0. with(erie, { new_cases &lt;- diff(c(0, cases)) mean(new_cases) }) ## [1] 56.06061 within() Adding and updating columns within() a data.frame First argument: a data.frame containing data to be updated – erie Second argument: an expression of one or more variable assignments, the assignments create new columns in the data.frame. Example: add a new_cases column erie_new_cases &lt;- within(erie, { new_cases &lt;- diff(c(0, cases)) }) head(erie_new_cases) ## date county state fips cases deaths new_cases ## 2569 2020-03-15 Erie New York 36029 3 0 3 ## 3028 2020-03-16 Erie New York 36029 6 0 3 ## 3544 2020-03-17 Erie New York 36029 7 0 1 ## 4141 2020-03-18 Erie New York 36029 7 0 0 ## 4870 2020-03-19 Erie New York 36029 28 0 21 ## 5717 2020-03-20 Erie New York 36029 31 0 3 2.4 Day 11: aggregate() and an initial work flow aggregate() for summarizing columns by group Goal: summarize maximum number of cases by county in New York state Setup Read and subset the New York Times data to contain only New York state data url &lt;- &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv&quot; us &lt;- read.csv(url, stringsAsFactors = FALSE) ny_state &lt;- subset(us, state == &quot;New York&quot;) aggregate() First argument: a formula – cases ~ county Right-hand side: the variable to be used to subset (group) the data – county Left-hand side: the variable to be used in the aggregation function – cases Second argument: source of data – ny_state Third argument: the function to be applied to each subset of data – max Maximum number of cases by county: max_cases_by_county &lt;- aggregate( cases ~ county, ny_state, max ) Exploring the data summary Subset to some interesting ‘counties’ head(max_cases_by_county) ## county cases ## 1 Albany 581 ## 2 Allegany 28 ## 3 Broome 167 ## 4 Cattaraugus 32 ## 5 Cayuga 36 ## 6 Chautauqua 24 subset( max_cases_by_county, county %in% c(&quot;New York City&quot;, &quot;Westchester&quot;, &quot;Erie&quot;) ) ## county cases ## 14 Erie 1850 ## 29 New York City 123146 ## 57 Westchester 21828 Help: ?aggregate.formula An initial work flow Data input url &lt;- &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv&quot; us &lt;- read.csv(url, stringsAsFactors = FALSE) class(us) ## [1] &quot;data.frame&quot; dim(us) ## [1] 64707 6 head(us) ## date county state fips cases deaths ## 1 2020-01-21 Snohomish Washington 53061 1 0 ## 2 2020-01-22 Snohomish Washington 53061 1 0 ## 3 2020-01-23 Snohomish Washington 53061 1 0 ## 4 2020-01-24 Cook Illinois 17031 1 0 ## 5 2020-01-24 Snohomish Washington 53061 1 0 ## 6 2020-01-25 Orange California 6059 1 0 Cleaning date is a plain-old character vector, but should be a Date. class(us$date) # oops, should be &#39;Date&#39; ## [1] &quot;character&quot; Update, method 1 us$date &lt;- as.Date(us$date, format = &quot;%Y-%m-%d&quot;) head(us) ## date county state fips cases deaths ## 1 2020-01-21 Snohomish Washington 53061 1 0 ## 2 2020-01-22 Snohomish Washington 53061 1 0 ## 3 2020-01-23 Snohomish Washington 53061 1 0 ## 4 2020-01-24 Cook Illinois 17031 1 0 ## 5 2020-01-24 Snohomish Washington 53061 1 0 ## 6 2020-01-25 Orange California 6059 1 0 Update, method 2 us &lt;- within(us, { date = as.Date(date, format = &quot;%Y-%m-%d&quot;) }) head(us) ## date county state fips cases deaths ## 1 2020-01-21 Snohomish Washington 53061 1 0 ## 2 2020-01-22 Snohomish Washington 53061 1 0 ## 3 2020-01-23 Snohomish Washington 53061 1 0 ## 4 2020-01-24 Cook Illinois 17031 1 0 ## 5 2020-01-24 Snohomish Washington 53061 1 0 ## 6 2020-01-25 Orange California 6059 1 0 Interested only in Erie county, New York state Subset, method 1 row_idx &lt;- (us$county == &quot;Erie&quot;) &amp; (us$state == &quot;New York&quot;) erie &lt;- us[row_idx,] dim(erie) ## [1] 33 6 Subset, method 2 erie &lt;- subset(us, (county == &quot;Erie&quot;) &amp; (state == &quot;New York&quot;)) dim(erie) ## [1] 33 6 Manipulation Goal: calculate new_cases as the difference between succesive days, using diff() Remember use of diff() ## example: `diff()` between successive numbers in a vector x &lt;- c(1, 1, 2, 3, 5, 8, 13) diff(x) ## [1] 0 1 1 2 3 5 ## note &#39;diff()&#39; what about an implicit &#39;0&#39; at the start of a sequence? diff( c(0, x) ) ## [1] 1 0 1 1 2 3 5 Update, methods 1 &amp; 2 ## one way... erie$new_cases &lt;- diff( c(0, erie$cases) ) ## ...or another erie &lt;- within(erie, { new_cases &lt;- diff( c(0, cases) ) }) Simple visualization Use a formula to describe the dependent (y-axis) variable as a function of the independent (x-axis) variable – cases ~ date plot( cases ~ date, erie) maybe more informative: log-transformed new cases plot( new_cases ~ date, erie, log = &quot;y&quot;, main = &quot;New Cases, Erie County&quot; ) ## Warning in xy.coords(x, y, xlabel, ylabel, log): 3 y values &lt;= 0 omitted from ## logarithmic plot Help: ?plot.formula Summary: calculate maximum (total) number of cases per county in New York state For Erie county, let’s see how to calculate the maximum (total) number of cases max(erie$cases) # one way... ## [1] 1850 with(erie, max(cases)) # ... another ## [1] 1850 Subset US data to New York state ny_state &lt;- subset(us, state == &quot;New York&quot;) Summarize each county in the state using aggregate(). First argument: summarize cases grouped by county – cases ~ county Second argument: data source – ny_state Third argument: function to apply to each subset – max max_cases_by_county &lt;- aggregate( cases ~ county, ny_state, max) head(max_cases_by_county) ## county cases ## 1 Albany 581 ## 2 Allegany 28 ## 3 Broome 167 ## 4 Cattaraugus 32 ## 5 Cayuga 36 ## 6 Chautauqua 24 subset() to select counties subset( max_cases_by_county, county %in% c(&quot;New York City&quot;, &quot;Westchester&quot;, &quot;Erie&quot;) ) ## county cases ## 14 Erie 1850 ## 29 New York City 123146 ## 57 Westchester 21828 Summary: calculate maximum (total) number of cases per state Use entire data set, us aggregate() cases by county and state – cases ~ county + state max_cases_by_county_state &lt;- aggregate( cases ~ county + state, us, max ) dim(max_cases_by_county_state) ## [1] 2767 3 head(max_cases_by_county_state) ## county state cases ## 1 Autauga Alabama 25 ## 2 Baldwin Alabama 102 ## 3 Barbour Alabama 14 ## 4 Bibb Alabama 24 ## 5 Blount Alabama 18 ## 6 Bullock Alabama 8 aggregate() a second time, using max_cases_by_county_state and aggregtaing by state max_cases_by_state &lt;- aggregate( cases ~ state, max_cases_by_county_state, max ) Explore the data head(max_cases_by_state) ## state cases ## 1 Alabama 634 ## 2 Alaska 143 ## 3 Arizona 2264 ## 4 Arkansas 355 ## 5 California 10854 ## 6 Colorado 1549 subset( max_cases_by_state, state %in% c(&quot;California&quot;, &quot;Illinois&quot;, &quot;New York&quot;, &quot;Washington&quot;) ) ## state cases ## 5 California 10854 ## 15 Illinois 18087 ## 34 New York 123146 ## 52 Washington 4811 2.5 Day 12 (Friday) Zoom check-in 2.6 Day 13: 2.7 Day 14 Self-directed activities. "]
]
